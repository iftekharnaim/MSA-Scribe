even if you had a decision tree computer lets prove this theorem which we call just comparison sorts so this is a transformation for each value of the decision trees depend on and we are just going to think of the algorithm as splitting whenever it makes a comparison if we take a comparison sort like mergesort at some point it makes a comparison if the comparison came out came out greater than you can build a tree in this way listing all possible executions of this algorithm so we will call these all possible instruction traces so you write all the instructions for all possible how they could come and what the algorithm does and at the you will get a tree now how big will that tree be roughly as a function of good right if it is got to be able to sort every possible list of length there a lot of permutations on elements so this tree is huge exponential in the input size it is not very compact representation they have constant length here the length on and it depends exponentially on nonetheless we can use this as a tool into a decision tree and now we have this observation that the of leaves in this decision tree have to be really big before we get to leaves so this decision tree represents all the some root to leaf path the number of comparisons and therefore the worst case running time of length is going to be 
