-d
-w
-c
-b
-s
-e
-r
Directory: /home/vax7/u6/inaim/MSA/data/e6p22/
ChunkSize: 60
Heuristic Weight: 2.0
Beamsize: 60.0
GapOpen: 0.125
GapExtension: 0.05
74
even(1999)if(2540)you(2868)had(3221)a(3572)decision(3916)tree(5069)computer(5724)whatever(6748)that(7636)is(8052)okay(9349)but(10267)lets(10811)prove(11651)this(12228)theorem(12765)that(13938)decision(14379)trees(15339)in(16195)some(16427)ways(16847)which(19306)we(19948)call(20338)just(20787)comparison(21306)sorts(22362)so(27066)this(28473)is(28890)a(29169)transformation(29474)and(31218)we(31445)are(31545)going(32337)to(32955)build(33353)1(33945)tree(34297)each(35298)value(35906)of(36689)so(37657)mention(38713)that(39400)the(39864)decision(40496)trees(41569)depend(42520)it(44314)works(45010)for(45625)all(45976)values(46465)on(47439)and(48479)we(48399)are(48499)just(49352)going(50591)to(51176)think(52281)of(52847)the(53263)algorithm(54056)as(55366)splitting(55839)into(57383)2(57967)forks(58448)whenever(59905)
82
eve(2056)in(2504)you(3432)had(3896)a(4216)decision(4352)tree(5519)computer(6047)whaever(6986)that(8954)is(9450)but(9983)lets(10344)prove(10922)this(11431)theorem(11833)that(12695)decision(13111)trees(14160)in(14807)some(15063)sense(15503)comparision(16784)sorting(18223)algorithms(19127)which(20495)we(21007)call(21287)comparison(21824)sorts(22959)so(27015)this(28367)is(28751)a(29041)transformation(29240)and(31255)we(31727)are(31827)going(32329)to(32679)build(32959)1(33447)tree(33758)for(34273)each(34583)value(35191)of(35655)so(37382)mention(37576)that(38335)the(38783)decision(39384)trees(40527)depend(41743)on(42630)the(44175)algorithm(44654)we(45706)will(45806)depends(46274)on(46982)and(47976)we(48245)are(48345)just(48968)gonna(50014)think(50567)of(51102)the(51390)algorithm(51710)as(52694)splittting(52998)into(53966)forks(55151)the(55801)left(56110)subtree(56566)and(57558)the(57862)right(58142)subtree(58702)whenever(59678)
55
even(2170)if(2929)you(3489)had(4073)a(4705)decision(5065)tree(6617)computer(7305)whatever(8873)that(10473)is(11169)okay(12281)but(13553)lets(14377)prive(15520)this(16592)theory(17514)that(18546)decision(19568)trees(20889)somehow(22312)decison(25264)so(27960)this(29016)is(29576)a(30049)transformation(30542)and(33306)we(33828)are(33928)going(35536)to(36280)buld(36760)1(38690)tree(39245)for(40084)each(40656)value(41904)of(42640)decison(44336)trees(46472)depend(47624)on(48776)and(50479)we(51035)are(51135)just(52136)going(53312)to(54008)think(54416)of(55336)the(55713)algorithm(56302)as(58311)splitting(59328)
76
even(1081)if(1656)you(1900)had(2288)a(2584)decision(2768)tree(3568)computer(4120)whatever(5313)that(6281)is(6729)okay(8201)but(8777)lets(9169)prove(9849)this(10353)theorem(10705)that(13257)decision(13657)trees(14761)in(15529)some(15793)model(16921)comparison(17465)sorting(18840)algorithms(19560)so(26041)this(27497)is(27889)a(29193)transformation(29425)and(30929)we(31205)are(31305)going(31841)to(32297)build(32553)1(33193)tree(33561)for(34097)each(34433)value(34936)of(35408)the(37272)decision(37624)trees(38816)depend(39872)on(40569)the(41545)algorithm(41881)we(45421)will(45521)it(45977)depends(46225)on(46953)but(47449)it(47857)works(48185)for(48657)all(49009)values(49321)we(51181)are(51281)going(51985)to(52489)think(52744)of(53312)the(53576)algorithm(53857)as(55424)splitting(56664)into(57328)2(58217)forks(58657)the(59305)left(59601)
42
even(1137)if(3192)you(3720)had(4289)a(5264)descision(6257)tree(8416)computer(9321)lets(12570)prove(14249)this(15153)that(17394)descision(18049)tree(20705)so(26241)thi(28275)sis(28709)a(29778)transformation(30289)and(32490)we(33050)are(33410)going(34018)to(34642)build(35162)1(36539)tree(37410)each(39025)the(42146)algorythim(42634)depends(45907)on(47625)so(49282)we(49795)are(50298)going(50923)to(51531)think(52067)of(52906)the(53347)whenever(58042)it(59498)
51
even(2452)if(3122)you(3369)have(3762)a(4190)decision(4649)free(6045)computer(6637)lets(8008)prove(8656)this(9249)theorem(9721)that(11264)decision(12352)trees(14043)model(14874)which(16878)we(17481)call(17833)comparison(18873)sorts(20519)so(27284)we(32430)are(32530)going(33162)to(33727)go(34300)1(34954)decision(37964)trees(38938)depend(41082)on(41903)but(42923)it(43733)works(44019)for(44787)all(45163)values(46883)of(47667)and(48335)we(48663)are(48763)just(49603)going(50524)to(50655)think(51084)of(52275)the(52595)algorithm(53043)a(54455)splitting(55885)
48
even(1281)if(2266)you(2533)had(2815)a(3155)decision(3386)tree(4654)computer(7490)lets(9368)prove(10786)this(12108)theorem(12488)which(17214)we(17794)call(18092)just(19215)comparison(19607)sorts(21313)so(26194)this(27483)is(27896)a(28176)transformation(28367)for(33366)each(33686)value(34205)of(34798)the(36681)decision(37008)trees(38550)depend(39401)on(40321)and(45987)we(46298)are(46398)just(47320)going(47774)to(48781)think(49067)of(51351)the(51588)algorithm(51912)as(53434)splitting(53903)whenever(56626)it(58399)makes(58627)a(59131)
56
even(1267)if(1845)you(2130)had(2528)a(3006)decsion(3182)tree(4916)computer(5728)whatever(6850)that(7729)it(8079)okay(8905)let(9337)us(10128)prove(11185)this(12746)which(16926)we(17532)call(17904)just(18595)cojmparison(19185)sorts(21629)so(26144)this(27713)is(28237)a(28625)trasformation(29066)we(31637)are(32551)going(33007)to(33570)build(33847)1(35350)tree(36566)for(37285)each(37779)value(38672)of(39814)depends(41928)on(43304)but(44721)works(45174)on(46136)all(46772)vales(47334)of(48225)of(50690)spliting(51495)into(52901)2(54009)forks(54898)whenever(57510)it(58470)makes(58770)a(59439)comparision(59767)
61
even(1763)if(2433)you(2677)had(3077)a(3632)decistion(3847)tree(5107)computer(5827)whatever(6867)that(8447)is(8797)lets(11047)prove(11597)that(12167)decision(12547)trees(13497)somehow(14647)model(15647)algorithms(18407)which(19767)we(20327)call(21777)so(26357)this(27607)is(28047)a(28507)transformation(28707)and(31127)we(31367)are(31467)going(32027)to(32407)build(32627)1(33067)tree(33387)for(34227)each(34567)value(35457)of(36027)decision(38317)trees(39497)depend(40447)on(41137)the(42567)algorithm(43707)depends(45567)on(46297)but(47867)works(48307)for(48827)all(49447)values(49847)of(50497)and(51737)we(52087)are(52187)just(52677)going(53137)to(53587)think(53797)of(54337)
62
if(401)you(818)even(1229)had(1241)a(1741)decision(2020)tree(3074)computer(3777)whatever(5125)that(6108)is(6570)okay(7841)lets(8361)prove(9209)this(9772)theorem(10286)decision(13328)trees(14457)model(16019)compare(16709)which(19072)we(19754)call(20098)comparison(20707)sorts(22130)so(25699)this(27282)is(27722)a(28026)transformation(28306)and(30192)we(30454)are(30554)going(31560)to(32035)build(32290)1(33250)tree(33592)for(34170)value(35683)of(36338)the(37258)decision(38066)trees(39547)depends(40945)on(43262)works(44547)for(45261)all(45635)values(46122)as(47162)think(48658)of(50115)the(50455)algorithm(50859)as(52428)splitting(52811)2(55753)forks(56643)left(57715)sub(58899)tree(59523)
...........................................................................................................................Number of Queue Removal: 123

Time spent in alignment:1528 ms
Same Count = 0
Closed list size = 0
even		if		_		_		you		_		had		_		a		decision		_		tree		computer		whatever		that		is		okay		but		lets		_		_		_		_		_		prove		this		theorem		_		that		decision		trees		_		_		_		in		some		ways		_		_		_		_		which		we		call		just		comparison		sorts		so		_		_		this		is		a		transformation		and		we		are		going		to		build		_		1		tree		_		each		value		of		so		mention		that		the		_		decision		trees		depend		_		_		_		_		_		_		it		_		_		_		_		works		for		_		all		values		on		and		we		are		just		going		to		_		think		of		the		algorithm		as		_		splitting		into		2		forks		_		_		whenever		_		_		_		_		_		_		_		_		_		_		
_		_		eve		in		you		_		had		_		a		decision		_		tree		computer		whaever		that		is		_		but		lets		_		_		_		_		_		prove		this		theorem		_		that		decision		trees		_		_		_		in		some		_		sense		comparision		sorting		algorithms		which		we		call		_		comparison		sorts		so		_		_		this		is		a		transformation		and		we		are		going		to		build		_		1		tree		for		each		value		of		so		mention		that		the		_		decision		trees		depend		on		_		the		algorithm		we		will		_		depends		on		_		_		_		_		_		_		_		_		and		we		are		just		_		_		gonna		think		of		the		algorithm		as		_		splittting		into		_		forks		the		left		_		_		_		_		_		subtree		and		the		right		subtree		whenever		
even		if		_		_		you		_		had		_		a		decision		_		tree		computer		whatever		that		is		okay		but		lets		prive		_		_		_		_		_		this		_		theory		that		decision		trees		somehow		_		_		_		_		_		decison		_		_		_		_		_		_		_		_		_		so		_		_		this		is		a		transformation		and		we		are		going		to		buld		_		1		tree		for		each		value		of		_		_		_		_		_		decison		trees		depend		on		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		and		we		are		just		going		to		_		think		of		the		algorithm		as		_		splitting		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
even		if		_		_		you		_		had		_		a		decision		_		tree		computer		whatever		that		is		okay		but		lets		_		_		_		_		_		prove		this		theorem		_		that		decision		trees		_		_		_		in		some		model		_		comparison		sorting		algorithms		_		_		_		_		_		_		so		_		_		this		is		a		transformation		and		we		are		going		to		build		_		1		tree		for		each		value		of		_		_		_		the		_		decision		trees		depend		on		_		the		algorithm		we		will		it		depends		on		but		it		works		for		_		all		values		_		_		we		are		_		going		to		_		think		of		the		algorithm		as		_		splitting		into		2		forks		the		left		_		_		_		_		_		_		_		_		_		_		_		
even		if		_		_		you		_		had		_		a		descision		_		tree		computer		_		_		_		_		_		lets		_		_		_		_		_		prove		this		_		_		that		descision		tree		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		so		thi		sis		_		_		a		transformation		and		we		are		going		to		build		_		1		tree		_		each		_		_		_		_		_		the		algorythim		_		_		depends		on		so		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		we		are		_		going		to		_		think		of		the		_		_		_		_		_		_		_		_		_		whenever		it		_		_		_		_		_		_		_		_		_		
even		if		_		_		you		_		_		have		a		decision		free		_		computer		_		_		_		_		_		lets		_		_		_		_		_		prove		this		theorem		_		that		decision		trees		_		model		_		_		_		_		_		_		_		_		which		we		call		_		comparison		sorts		so		_		_		_		_		_		_		_		we		are		going		to		_		go		1		_		_		_		_		_		_		_		_		_		_		decision		trees		depend		on		_		_		_		_		_		_		_		_		but		it		works		for		_		all		values		of		and		we		are		just		going		to		_		think		of		the		algorithm		_		a		splitting		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
even		if		_		_		you		_		had		_		a		decision		_		tree		computer		_		_		_		_		_		lets		_		_		_		_		_		prove		this		theorem		_		_		_		_		_		_		_		_		_		_		_		_		_		_		which		we		call		just		comparison		sorts		so		_		_		this		is		a		transformation		_		_		_		_		_		_		_		_		_		for		each		value		of		_		_		_		the		_		decision		trees		depend		on		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		and		we		are		just		going		to		_		think		of		the		algorithm		as		_		splitting		_		_		_		_		_		whenever		it		makes		a		_		_		_		_		_		_		_		
even		if		_		_		you		_		had		_		a		decsion		_		tree		computer		whatever		that		_		_		_		_		_		it		okay		let		us		prove		this		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		which		we		call		just		cojmparison		sorts		so		_		_		this		is		a		trasformation		_		we		are		going		to		build		_		1		tree		for		each		value		of		_		_		_		_		_		_		_		depends		on		_		_		_		_		_		_		_		_		but		_		works		_		on		all		vales		of		_		_		_		_		_		_		_		_		of		_		_		_		_		spliting		into		2		forks		_		_		whenever		it		makes		a		comparision		_		_		_		_		_		_		
even		if		_		_		you		_		had		_		a		decistion		_		tree		computer		whatever		that		is		_		_		lets		_		_		_		_		_		prove		_		_		_		that		decision		trees		somehow		model		algorithms		_		_		_		_		_		_		_		which		we		call		_		_		_		so		_		_		this		is		a		transformation		and		we		are		going		to		build		_		1		tree		for		each		value		of		_		_		_		_		_		decision		trees		depend		on		_		the		algorithm		_		_		_		depends		on		but		_		works		for		_		all		values		of		and		we		are		just		going		to		_		think		of		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		if		_		_		you		even		had		_		a		decision		_		tree		computer		whatever		that		is		okay		_		lets		_		_		_		_		_		prove		this		theorem		_		_		decision		trees		_		model		compare		_		_		_		_		_		_		_		which		we		call		_		comparison		sorts		so		_		_		this		is		a		transformation		and		we		are		going		to		build		_		1		tree		for		_		value		of		_		_		_		the		_		decision		trees		depends		on		_		_		_		_		_		_		_		_		_		_		works		for		_		all		values		_		_		_		_		_		_		_		as		think		of		the		algorithm		as		_		splitting		_		2		forks		_		left		_		_		_		_		_		_		sub		tree		_		_		_		

even if eve in you even had have a decision free tree computer whatever that is okay but lets prive it okay let us prove this theorem theory that decision trees somehow model compare in some model decison comparision sorting algorithms which we call just comparison sorts so thi sis this is a transformation and we are going to build go 1 tree for each value of so mention that the algorythim decision trees depend on so the algorithm we will it depends on but it works for on all values of and we are just going to as think of the algorithm as a splitting into 2 forks the left whenever it makes a comparision subtree sub tree right subtree whenever 

even if eve in you even had have a decision free tree computer whatever that is okay but lets prive it okay let us prove this theorem theory that decision trees somehow model compare in some model decison comparision sorting algorithms which we call just comparison sorts so thi sis this is a transformation and we are going to build go 1 tree for each value of so mention that the algorythim decision trees depend on so the algorithm we will it depends on but it works for on all values of and we are just going to as think of the algorithm as a splitting into 2 forks the left whenever it makes a comparision subtree sub tree right subtree whenever 

 [(even:8)] even  [(if:9)] if  [(eve:1)]   [(in:1)]   [(you:10)] you  [(even:1)]   [(had:9)] had  [(have:1)]   [(a:10)] a  [(decistion:1)(decsion:1)(decision:7)(descision:1)] decision  [(free:1)]   [(tree:9)] tree  [(computer:10)] computer  [(whatever:6)(whaever:1)] whatever  [(that:7)] that  [(is:6)] is  [(okay:4)] okay  [(but:4)] but  [(lets:9)] lets  [(prive:1)]   [(it:1)]   [(okay:1)]   [(let:1)]   [(us:1)]   [(prove:9)] prove  [(this:9)] this  [(theorem:6)] theorem  [(theory:1)]   [(that:7)] that  [(decision:7)(descision:1)] decision  [(tree:1)(trees:7)] trees  [(somehow:2)] somehow  [(model:3)] model  [(compare:1)(algorithms:1)]   [(in:3)] in  [(some:3)] some  [(model:1)(ways:1)]   [(decison:1)(sense:1)]   [(comparision:1)(comparison:1)]   [(sorting:2)] sorting  [(algorithms:2)] algorithms  [(which:7)] which  [(we:7)] we  [(call:7)] call  [(just:3)] just  [(cojmparison:1)(comparison:5)] comparison  [(sorts:6)] sorts  [(so:10)] so  [(thi:1)]   [(sis:1)]   [(this:8)] this  [(is:8)] is  [(a:9)] a  [(trasformation:1)(transformation:8)] transformation  [(and:7)] and  [(we:9)] we  [(are:9)] are  [(going:9)] going  [(to:9)] to  [(buld:1)(build:7)] build  [(go:1)]   [(1:9)] 1  [(tree:8)] tree  [(for:7)] for  [(each:8)] each  [(value:8)] value  [(of:8)] of  [(so:2)] so  [(mention:2)] mention  [(that:2)] that  [(the:6)] the  [(algorythim:1)]   [(decison:1)(decision:7)] decision  [(trees:8)] trees  [(depend:7)(depends:3)] depend  [(on:9)] on  [(so:1)]   [(the:3)] the  [(algorithm:3)] algorithm  [(we:2)] we  [(will:2)] will  [(it:2)] it  [(depends:3)] depends  [(on:3)] on  [(but:4)] but  [(it:2)] it  [(works:6)] works  [(for:5)] for  [(on:1)]   [(all:6)] all  [(values:5)(vales:1)] values  [(of:3)(on:1)] of  [(and:6)] and  [(we:8)] we  [(are:8)] are  [(just:6)] just  [(going:7)] going  [(to:7)] to  [(as:1)(gonna:1)]   [(think:9)] think  [(of:10)] of  [(the:8)] the  [(algorithm:7)] algorithm  [(as:6)] as  [(a:1)]   [(splittting:1)(spliting:1)(splitting:6)] splitting  [(into:4)] into  [(2:4)] 2  [(forks:5)] forks  [(the:2)] the  [(left:3)] left  [(whenever:4)] whenever  [(it:3)] it  [(makes:2)] makes  [(a:2)] a  [(comparision:1)]   [(subtree:1)]   [(sub:1)(and:1)]   [(tree:1)(the:1)]   [(right:1)]   [(subtree:1)]   [(whenever:1)]  

 [(even:8)] even  [(if:9)] if  [(eve:1)]   [(in:1)]   [(you:10)] you  [(even:1)]   [(had:9)] had  [(have:1)]   [(a:10)] a  [(decistion:1)(decsion:1)(decision:7)(descision:1)] decision  [(free:1)]   [(tree:9)] tree  [(computer:10)] computer  [(whatever:6)(whaever:1)] whatever  [(that:7)] that  [(is:6)] is  [(okay:4)] okay  [(but:4)] but  [(lets:9)] lets  [(prive:1)]   [(it:1)]   [(okay:1)]   [(let:1)]   [(us:1)]   [(prove:9)] prove  [(this:9)] this  [(theorem:6)] theorem  [(theory:1)]   [(that:7)] that  [(decision:7)(descision:1)] decision  [(tree:1)(trees:7)] trees  [(somehow:2)] somehow  [(model:3)] model  [(compare:1)(algorithms:1)]   [(in:3)] in  [(some:3)] some  [(model:1)(ways:1)]   [(decison:1)(sense:1)]   [(comparision:1)(comparison:1)]   [(sorting:2)] sorting  [(algorithms:2)] algorithms  [(which:7)] which  [(we:7)] we  [(call:7)] call  [(just:3)] just  [(cojmparison:1)(comparison:5)] comparison  [(sorts:6)] sorts  [(so:10)] so  [(thi:1)]   [(sis:1)]   [(this:8)] this  [(is:8)] is  [(a:9)] a  [(trasformation:1)(transformation:8)] transformation  [(and:7)] and  [(we:9)] we  [(are:9)] are  [(going:9)] going  [(to:9)] to  [(buld:1)(build:7)] build  [(go:1)]   [(1:9)] 1  [(tree:8)] tree  [(for:7)] for  [(each:8)] each  [(value:8)] value  [(of:8)] of  [(so:2)] so  [(mention:2)] mention  [(that:2)] that  [(the:6)] the  [(algorythim:1)]   [(decison:1)(decision:7)] decision  [(trees:8)] trees  [(depend:7)(depends:3)] depend  [(on:9)] on  [(so:1)]   [(the:3)] the  [(algorithm:3)] algorithm  [(we:2)] we  [(will:2)] will  [(it:2)] it  [(depends:3)] depends  [(on:3)] on  [(but:4)] but  [(it:2)] it  [(works:6)] works  [(for:5)] for  [(on:1)]   [(all:6)] all  [(values:5)(vales:1)] values  [(of:3)(on:1)] of  [(and:6)] and  [(we:8)] we  [(are:8)] are  [(just:6)] just  [(going:7)] going  [(to:7)] to  [(as:1)(gonna:1)]   [(think:9)] think  [(of:10)] of  [(the:8)] the  [(algorithm:7)] algorithm  [(as:6)] as  [(a:1)]   [(splittting:1)(spliting:1)(splitting:6)] splitting  [(into:4)] into  [(2:4)] 2  [(forks:5)] forks  [(the:2)] the  [(left:3)] left  [(whenever:4)] whenever  [(it:3)] it  [(makes:2)] makes  [(a:2)] a  [(comparision:1)]   [(subtree:1)]   [(sub:1)(and:1)]   [(tree:1)(the:1)]   [(right:1)]   [(subtree:1)]   [(whenever:1)]  

 [(even:8)] even  [(if:9)] if  [(eve:1)]   [(in:1)]   [(you:10)] you  [(even:1)]   [(had:9)] had  [(have:1)]   [(a:10)] a  [(decistion:1)(decsion:1)(decision:7)(descision:1)] decision  [(free:1)]   [(tree:9)] tree  [(computer:10)] computer  [(whatever:6)(whaever:1)] whatever  [(that:7)] that  [(is:6)] is  [(okay:4)] okay  [(but:4)] but  [(lets:9)] lets  [(prive:1)]   [(it:1)]   [(okay:1)]   [(let:1)]   [(us:1)]   [(prove:9)] prove  [(this:9)] this  [(theorem:6)] theorem  [(theory:1)]   [(that:7)] that  [(decision:7)(descision:1)] decision  [(tree:1)(trees:7)] trees  [(somehow:2)] somehow  [(model:3)] model  [(compare:1)(algorithms:1)]   [(in:3)] in  [(some:3)] some  [(model:1)(ways:1)]   [(decison:1)(sense:1)]   [(comparision:1)(comparison:1)]   [(sorting:2)] sorting  [(algorithms:2)] algorithms  [(which:7)] which  [(we:7)] we  [(call:7)] call  [(just:3)] just  [(cojmparison:1)(comparison:5)] comparison  [(sorts:6)] sorts  [(so:10)] so  [(thi:1)]   [(sis:1)]   [(this:8)] this  [(is:8)] is  [(a:9)] a  [(trasformation:1)(transformation:8)] transformation  [(and:7)] and  [(we:9)] we  [(are:9)] are  [(going:9)] going  [(to:9)] to  [(buld:1)(build:7)] build  [(go:1)]   [(1:9)] 1  [(tree:8)] tree  [(for:7)] for  [(each:8)] each  [(value:8)] value  [(of:8)] of  [(so:2)] so  [(mention:2)] mention  [(that:2)] that  [(the:6)] the  [(algorythim:1)]   [(decison:1)(decision:7)] decision  [(trees:8)] trees  [(depend:7)(depends:3)] depend  [(on:9)] on  [(so:1)]   [(the:3)] the  [(algorithm:3)] algorithm  [(we:2)] we  [(will:2)] will  [(it:2)] it  [(depends:3)] depends  [(on:3)] on  [(but:4)] but  [(it:2)] it  [(works:6)] works  [(for:5)] for  [(on:1)]   [(all:6)] all  [(values:5)(vales:1)] values  [(of:3)(on:1)] of  [(and:6)] and  [(we:8)] we  [(are:8)] are  [(just:6)] just  [(going:7)] going  [(to:7)] to  [(as:1)(gonna:1)]   [(think:9)] think  [(of:10)] of  [(the:8)] the  [(algorithm:7)] algorithm  [(as:6)] as  [(a:1)]   [(splittting:1)(spliting:1)(splitting:6)] splitting  [(into:4)] into  [(2:4)] 2  [(forks:5)] forks  [(the:2)] the  [(left:3)] left  [(whenever:4)] whenever  [(it:3)] it  [(makes:2)] makes  [(a:2)] a  [(comparision:1)]   [(subtree:1)]   [(sub:1)(and:1)]   [(tree:1)(the:1)]   [(right:1)]   [(subtree:1)]   [(whenever:1)]  
62
it(61320)makes(62166)a(62815)comparison(63134)if(66954)we(67349)take(67813)a(68221)comparison(68437)sort(69477)like(70269)merge(71525)sort(72197)and(72756)it(73109)does(73421)lots(73941)stuff(76205)at(76984)some(77340)point(78135)it(78604)makes(78884)a(79525)comparison(80156)there(81800)are(82494)2(82900)halves(83420)of(84261)the(84493)algorithm(84964)what(87387)the(87803)algorithm(88171)would(89651)do(90443)if(91307)the(91675)compariosn(92843)came(94611)out(95050)than(96228)in(97515)some(97844)sense(98706)what(99324)this(99722)tree(100282)is(100850)doing(101701)is(102427)listing(102714)all(103571)possible(104009)of(106833)this(107097)algorithm(107554)so(118552)we(118860)will(118960)call(119936)
71
it(60513)a(61326)comparison(61518)if(66520)we(66750)take(67078)a(67478)comparison(67807)sort(68894)like(70206)merge(71614)sort(72270)and(72862)it(73166)sdoes(73438)lots(74437)of(74927)stuff(75319)it(75854)does(76198)index(76806)theres(80338)2(81198)halves(81678)of(82374)the(82630)algorithm(82912)theres(84005)what(84735)the(85117)algorithm(85501)would(86639)do(87221)if(87597)the(87869)comparson(88477)came(90141)out(90605)less(90901)than(91389)or(91933)equal(92862)to(93901)so(94885)you(95269)can(95589)build(95933)a(96413)tree(96549)in(97029)this(97213)way(97653)so(98117)in(98541)some(98853)sense(99261)what(99797)this(101109)tree(101573)is(102197)doing(102485)is(102909)listing(103213)all(103846)possible(104269)of(107413)this(107637)algorithm(108045)so(118509)we(118665)will(118765)
48
into(61223)forks(63288)the(65207)left(65855)subtree(66618)and(68157)the(68631)right(69181)subtree(70047)whenver(71759)it(73559)a(75193)comparions(75559)some(78495)point(79191)it(80120)makes(80782)a(81702)comparision(82080)okay(85967)ther(87263)what(91140)the(91778)algorithm(92423)would(94462)do(95519)if(95976)the(96481)comparison(97174)we(99946)are(100046)greater(100806)so(102638)in(103174)some(103830)sense(104694)what(105638)the(106414)computer(107118)is(108430)doing(109313)is(110030)considering(111198)what(113422)would(114358)happen(115363)for(116578)all(117419)
76
subtree(60089)and(60921)the(61473)right(61793)subtree(62313)whenever(63209)it(64065)makes(64345)a(64849)if(67097)we(67369)take(67681)a(68105)comparison(68393)sort(69537)like(71424)mergesort(72336)it(73776)does(74112)lots(74648)of(75753)stuff(75985)stuff(75985)it(76665)does(77057)index(77489)theres(79657)2(80329)halves(80681)of(81545)the(82225)algorithm(82521)theres(83801)what(84561)the(85473)algorithm(85793)would(86921)do(87500)if(87760)the(88009)comparison(88304)came(89449)out(89920)less(90280)than(91304)or(91656)equal(91976)to(92665)and(93258)theres(93601)what(94305)the(94753)algorithm(95433)would(96657)do(97241)if(97585)came(98521)out(99113)greater(100001)than(101225)considering(102329)what(104465)would(104880)happen(105505)for(106592)all(106944)possible(107352)values(108368)of(108921)those(109216)comparisons(109664)so(118344)we(118524)will(118624)call(119240)these(119632)
50
makes(60076)a(60760)comparison(61227)if(66115)we(66723)take(67285)a(67907)comparison(68403)sort(70209)like(71144)a(73379)merge(73692)sort(74859)at(75995)some(76651)point(77628)it(78572)makes(79139)a(79892)comparison(80339)there(81988)are(82708)2(83363)halves(84111)of(86444)the(86819)comparisiton(87372)so(91500)you(92028)can(92668)build(93348)a(95108)tree(95508)in(96293)this(96811)way(97528)so(98264)what(98692)this(99460)tree(100372)is(101300)doing(101917)is(102948)listing(103342)all(104340)possible(105108)so(117677)we(118132)will(118717)call(119596)
59
if(65557)we(65864)take(66252)a(67404)comparison(67662)sort(68748)like(69941)merge(70508)sort(71348)and(72532)it(72832)does(73220)lots(73892)stuff(74863)but(76293)at(76716)some(77430)point(77908)it(78603)makes(79345)a(80451)comparison(80524)and(81461)there(81925)are(82707)2(83219)halves(83757)of(85341)the(85717)algorithm(86767)and(89322)what(89954)it(90283)would(90662)do(91697)if(92105)it(93285)is(93543)than(95582)so(96240)in(96821)some(97140)sense(97645)this(100285)tree(100888)is(101536)listing(101795)all(102791)the(103214)possible(103486)executions(104614)of(106617)the(107166)algorithm(107582)so(117840)we(118055)will(118503)call(119015)these(119551)
46
comparison(60112)if(65679)we(66026)take(66284)a(66831)comparison(67437)sort(69439)like(70488)mergesort(71769)at(75596)some(75889)point(76421)it(76993)makes(77278)a(78134)comparison(78355)if(82938)the(83184)comparison(83439)came(85587)out(86450)came(88299)out(89578)greater(90004)than(91126)you(93621)can(94397)build(94771)a(95476)tree(95635)in(96312)this(96597)way(97168)listing(98385)all(99472)possible(99878)executions(101075)of(103120)this(103374)algorithm(103788)so(117659)we(117848)will(117948)call(118898)these(119360)all(119884)
47
if(65831)we(66109)take(67117)a(67670)comparison(67991)sort(69454)like(70417)merge(71098)sort(72128)does(73705)a(74306)lot(74535)of(75089)stuff(75437)makes(76486)a(77164)comparison(77514)there(79965)are(81110)2(81506)halfs(82419)of(84110)the(84394)comparison(84947)came(88145)out(88751)greater(89234)than(90820)you(91908)can(92268)build(92669)a(93374)tree(93616)this(94347)way(94775)in(95915)some(96249)sense(96868)it(97887)is(98369)listin(98747)aall(100355)possible(102215)values(104907)so(117795)we(118494)will(119520)
57
if(65837)we(66277)take(66557)a(67027)comparison(67207)sort(69607)like(70087)mergesort(70537)and(71717)it(72017)does(72357)lots(72917)of(73527)it(75557)does(75837)arithmetic(76427)it(77947)does(78287)recursion(79527)whatever(81177)and(85297)it(85947)is(86047)what(86527)the(86967)algorithm(87407)would(88627)do(89917)if(90197)the(90457)comparison(90737)came(92027)greater(92807)than(93587)so(94267)you(94467)can(94847)build(95347)a(95897)tree(96327)in(96887)this(97097)way(97507)sow(98297)what(100717)tree(101667)is(102257)doing(102557)is(103157)it(104717)is(104817)listing(105307)so(117767)we(118077)will(118177)call(118907)these(119347)
58
right(60463)sub(61407)tree(61771)whwenver(62438)it(64635)makes(64894)a(65907)if(69108)you(69425)we(69707)take(70147)a(70827)comparison(71126)sort(73759)like(74939)merge(75781)sort(76678)okay(78444)theres(78877)2(80084)what(85688)the(86157)algorithm(86589)would(90129)do(90684)if(91060)it(91467)come(91908)out(93364)less(93948)than(94532)or(95689)greater(96100)than(97104)in(97860)1(99662)sense(100327)this(101428)tree(101966)is(102599)listing(103114)out(104488)what(104900)the(105429)tree(105917)or(109102)algorithm(109485)is(112242)doing(112620)for(113393)all(113781)values(114709)of(115965)comparisons(116429)so(118710)we(119001)will(119101)call(119857)
......................................................................................................................................................................Number of Queue Removal: 166

Time spent in alignment:1966 ms
Same Count = 0
Closed list size = 0
_		_		_		_		_		_		_		_		_		_		it		makes		a		comparison		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		merge		sort		_		and		it		does		lots		_		stuff		_		at		some		point		it		_		_		_		_		_		_		_		_		makes		a		comparison		_		there		are		2		halves		_		of		_		_		_		_		_		_		the		algorithm		_		what		the		algorithm		_		_		_		would		do		if		the		compariosn		came		out		_		_		_		_		than		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		some		sense		_		what		this		tree		is		doing		is		_		_		listing		_		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		_		_		of		this		algorithm		_		_		_		_		so		we		will		call		_		_		
_		_		_		_		_		_		_		_		_		_		it		_		a		comparison		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		merge		sort		_		and		it		sdoes		lots		of		stuff		_		_		_		_		it		does		index		_		theres		_		_		_		_		_		_		_		_		_		_		2		halves		_		of		_		_		_		_		_		_		the		algorithm		theres		what		the		algorithm		_		_		_		would		do		if		the		comparson		came		out		less		_		_		_		than		or		equal		to		so		_		_		_		_		_		_		_		_		_		_		_		you		can		build		a		tree		in		_		_		this		way		so		in		some		sense		_		what		this		tree		is		doing		is		_		_		listing		_		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		_		_		of		this		algorithm		_		_		_		_		so		we		will		_		_		_		
into		forks		the		left		subtree		and		the		right		subtree		whenver		it		_		a		comparions		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		some		point		it		_		_		_		_		_		_		_		_		makes		a		comparision		okay		ther		_		_		_		_		_		_		_		_		_		_		what		the		algorithm		_		_		_		_		_		_		_		would		do		if		the		comparison		_		_		_		_		_		_		_		_		_		_		_		we		are		greater		so		_		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		some		sense		_		what		_		_		_		_		_		_		_		_		_		_		the		computer		_		_		_		_		_		_		_		_		_		_		is		doing		is		considering		what		would		happen		for		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		_		_		subtree		and		the		right		subtree		whenever		it		makes		a		_		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		_		_		mergesort		_		it		does		lots		of		stuff		stuff		_		_		_		it		does		index		_		theres		_		_		_		_		_		_		_		_		_		_		2		halves		_		of		_		_		_		_		_		_		the		algorithm		theres		what		the		algorithm		_		_		_		would		do		if		the		comparison		came		out		less		_		_		_		than		or		equal		to		_		_		and		theres		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		what		_		_		_		_		_		_		_		_		_		_		the		algorithm		would		do		if		came		out		greater		than		_		_		_		_		_		_		considering		what		would		happen		for		all		possible		values		_		of		_		_		_		those		comparisons		_		so		we		will		call		these		_		
_		_		_		_		_		_		_		_		_		_		_		makes		a		comparison		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		a		merge		sort		_		_		_		_		_		_		_		_		at		some		point		it		_		_		_		_		_		_		_		_		makes		a		comparison		_		there		are		2		halves		_		of		_		_		_		_		_		_		the		_		_		_		_		_		_		_		_		_		_		_		_		comparisiton		_		_		_		_		_		_		_		_		_		_		so		_		_		_		_		_		_		_		_		_		_		_		you		can		build		a		tree		in		_		_		this		way		so		_		_		_		_		what		this		tree		is		doing		is		_		_		listing		_		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		_		_		_		_		_		_		_		_		_		so		we		will		call		_		_		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		merge		sort		_		and		it		does		lots		_		stuff		but		at		some		point		it		_		_		_		_		_		_		_		_		makes		a		comparison		and		there		are		2		halves		_		of		_		_		_		_		_		_		the		algorithm		_		_		_		_		and		what		it		would		do		if		_		_		_		_		_		it		is		_		than		_		_		_		so		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		some		sense		_		_		this		tree		is		_		_		_		_		listing		_		all		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		_		executions		of		_		_		_		_		the		algorithm		so		we		will		call		these		_		
_		_		_		_		_		_		_		_		_		_		_		_		_		comparison		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		_		_		mergesort		_		_		_		_		_		_		_		at		some		point		it		_		_		_		_		_		_		_		_		makes		a		comparison		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		if		the		comparison		came		out		_		_		_		_		_		_		_		_		_		_		_		_		_		came		out		_		_		_		greater		than		you		can		build		a		tree		in		_		_		this		way		_		_		_		_		_		_		_		_		_		_		_		_		_		listing		_		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		_		executions		of		this		algorithm		_		_		_		_		so		we		will		call		these		all		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		merge		sort		_		_		_		does		_		_		_		_		_		_		_		_		_		_		_		_		a		lot		of		stuff		makes		a		comparison		_		there		are		2		_		halfs		of		_		_		_		_		_		_		the		_		_		_		_		_		_		_		_		_		_		_		_		comparison		came		out		_		_		_		greater		than		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		you		can		build		a		tree		_		_		_		this		way		_		in		some		sense		_		_		_		_		_		_		_		it		is		listin		aall		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		possible		values		_		_		_		_		_		_		_		_		so		we		will		_		_		_		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		if		_		we		take		a		comparison		sort		like		_		_		_		mergesort		and		it		does		lots		of		_		_		_		_		_		it		does		_		_		_		_		arithmetic		it		does		_		_		_		_		_		_		_		_		_		_		recursion		whatever		and		it		is		what		the		algorithm		_		_		_		_		_		_		_		would		do		if		the		comparison		came		_		_		_		_		greater		than		_		_		_		so		_		_		_		_		_		_		_		_		_		_		_		you		can		build		a		tree		in		_		_		this		way		_		_		_		_		sow		what		_		tree		is		doing		is		it		is		listing		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		so		we		will		call		these		_		
_		_		_		_		_		_		_		right		_		_		_		_		_		_		sub		tree		whwenver		it		makes		a		if		you		we		take		a		comparison		sort		like		_		merge		sort		_		_		_		_		_		_		_		_		_		_		_		_		_		_		okay		theres		_		_		_		_		_		_		_		_		_		_		2		_		_		_		_		_		_		_		_		what		the		algorithm		_		_		_		_		_		_		_		would		do		if		_		_		_		_		_		it		come		_		_		_		_		_		_		_		_		_		_		_		out		less		than		or		greater		than		_		_		_		_		_		in		1		sense		this		_		_		_		_		_		_		_		_		tree		is		_		_		_		_		listing		_		_		_		_		_		_		_		_		out		what		the		tree		or		algorithm		is		doing		_		_		_		_		_		for		all		_		values		_		of		_		_		comparisons		_		_		_		so		we		will		call		_		_		

into forks the left subtree and the right subtree whenever it makes a comparison sub tree whwenver it makes a if you we take a comparison sort like a merge sort mergesort and it does lots of stuff but at some point it does index okay theres a arithmetic of does makes a comparison okay there are 2 halves halfs of recursion whatever and it is what the algorithm theres what the algorithm and what it would do if the comparison came out less it is greater than or equal to so we are theres so came out less than or greater than you can build a tree in 1 sense this way so in some sense sow what this tree is doing is it is listing aall all the computer would do if came out greater than tree or algorithm is doing is considering what would happen for all possible values executions of this algorithm comparisons those comparisons algorithm so we will call these all 

into forks the left subtree and the right subtree whenever it makes a comparison sub tree whwenver it makes a if you we take a comparison sort like a merge sort mergesort and it does lots of stuff but at some point it does index okay theres a arithmetic of does makes a comparison okay there are 2 halves halfs of recursion whatever and it is what the algorithm theres what the algorithm and what it would do if the comparison came out less it is greater than or equal to so we are theres so came out less than or greater than you can build a tree in 1 sense this way so in some sense sow what this tree is doing is it is listing aall all the computer would do if came out greater than tree or algorithm is doing is considering what would happen for all possible values executions of this algorithm comparisons those comparisons algorithm so we will call these all 

 [(into:1)]   [(forks:1)]   [(the:1)]   [(left:1)]   [(subtree:2)] subtree  [(and:2)] and  [(the:2)] the  [(right:3)] right  [(subtree:2)] subtree  [(whenever:1)(whenver:1)]   [(it:4)] it  [(makes:3)] makes  [(a:5)] a  [(comparions:1)(comparison:4)] comparison  [(sub:1)]   [(tree:1)]   [(whwenver:1)]   [(it:1)]   [(makes:1)]   [(a:1)]   [(if:9)] if  [(you:1)]   [(we:9)] we  [(take:9)] take  [(a:9)] a  [(comparison:9)] comparison  [(sort:9)] sort  [(like:9)] like  [(a:1)]   [(merge:6)] merge  [(sort:6)] sort  [(mergesort:3)] mergesort  [(and:4)] and  [(it:5)] it  [(does:5)(sdoes:1)] does  [(lots:5)] lots  [(of:3)] of  [(stuff:4)] stuff  [(but:1)(stuff:1)]   [(at:4)] at  [(some:5)] some  [(point:5)] point  [(it:8)] it  [(does:3)] does  [(index:2)] index  [(okay:1)]   [(theres:3)] theres  [(a:1)]   [(arithmetic:1)(lot:1)]   [(of:1)(it:1)]   [(does:1)(stuff:1)]   [(makes:6)] makes  [(a:6)] a  [(comparision:1)(comparison:5)] comparison  [(okay:1)(and:1)]   [(there:4)(ther:1)] there  [(are:4)] are  [(2:7)] 2  [(halves:5)] halves  [(halfs:1)]   [(of:6)] of  [(recursion:1)]   [(whatever:1)]   [(and:1)]   [(it:1)]   [(is:1)]   [(what:3)] what  [(the:9)] the  [(algorithm:7)] algorithm  [(theres:2)] theres  [(what:3)] what  [(the:3)] the  [(algorithm:3)] algorithm  [(and:1)]   [(what:1)]   [(it:1)]   [(would:7)] would  [(do:7)] do  [(if:8)] if  [(the:6)] the  [(comparson:1)(comparisiton:1)(comparison:5)(compariosn:1)] comparison  [(came:6)] came  [(out:5)] out  [(less:2)] less  [(it:2)] it  [(is:1)(come:1)]   [(greater:2)] greater  [(than:6)] than  [(or:2)] or  [(equal:2)] equal  [(to:2)] to  [(so:4)] so  [(we:1)]   [(are:1)(and:1)]   [(theres:1)(greater:1)]   [(so:1)]   [(came:1)]   [(out:2)] out  [(less:1)]   [(than:1)]   [(or:1)]   [(greater:2)] greater  [(than:2)] than  [(you:5)] you  [(can:5)] can  [(build:5)] build  [(a:5)] a  [(tree:5)] tree  [(in:8)] in  [(1:1)]   [(sense:1)]   [(this:6)] this  [(way:5)] way  [(so:2)] so  [(in:2)] in  [(some:5)] some  [(sense:5)] sense  [(sow:1)]   [(what:6)] what  [(this:4)] this  [(tree:6)] tree  [(is:6)] is  [(doing:4)] doing  [(is:4)] is  [(it:2)] it  [(is:2)] is  [(listin:1)(listing:7)] listing  [(aall:1)]   [(all:5)] all  [(the:3)] the  [(computer:1)(algorithm:1)]   [(would:1)]   [(do:1)]   [(if:1)]   [(came:1)]   [(out:2)] out  [(greater:1)(what:1)]   [(than:1)(the:1)]   [(tree:1)]   [(or:1)]   [(algorithm:1)]   [(is:2)] is  [(doing:2)] doing  [(is:1)]   [(considering:2)] considering  [(what:2)] what  [(would:2)] would  [(happen:2)] happen  [(for:3)] for  [(all:3)] all  [(possible:7)] possible  [(values:3)] values  [(executions:2)] executions  [(of:6)] of  [(this:3)] this  [(algorithm:3)] algorithm  [(comparisons:1)]   [(those:1)]   [(comparisons:1)(the:1)]   [(algorithm:1)]   [(so:9)] so  [(we:9)] we  [(will:9)] will  [(call:7)] call  [(these:4)] these  [(all:1)]  

 [(into:1)]   [(forks:1)]   [(the:1)]   [(left:1)]   [(subtree:2)] subtree  [(and:2)] and  [(the:2)] the  [(right:3)] right  [(subtree:2)] subtree  [(whenever:1)(whenver:1)]   [(it:4)] it  [(makes:3)] makes  [(a:5)] a  [(comparions:1)(comparison:4)] comparison  [(sub:1)]   [(tree:1)]   [(whwenver:1)]   [(it:1)]   [(makes:1)]   [(a:1)]   [(if:9)] if  [(you:1)]   [(we:9)] we  [(take:9)] take  [(a:9)] a  [(comparison:9)] comparison  [(sort:9)] sort  [(like:9)] like  [(a:1)]   [(merge:6)] merge  [(sort:6)] sort  [(mergesort:3)] mergesort  [(and:4)] and  [(it:5)] it  [(does:5)(sdoes:1)] does  [(lots:5)] lots  [(of:3)] of  [(stuff:4)] stuff  [(but:1)(stuff:1)]   [(at:4)] at  [(some:5)] some  [(point:5)] point  [(it:8)] it  [(does:3)] does  [(index:2)] index  [(okay:1)]   [(theres:3)] theres  [(a:1)]   [(arithmetic:1)(lot:1)]   [(of:1)(it:1)]   [(does:1)(stuff:1)]   [(makes:6)] makes  [(a:6)] a  [(comparision:1)(comparison:5)] comparison  [(okay:1)(and:1)]   [(there:4)(ther:1)] there  [(are:4)] are  [(2:7)] 2  [(halves:5)] halves  [(halfs:1)]   [(of:6)] of  [(recursion:1)]   [(whatever:1)]   [(and:1)]   [(it:1)]   [(is:1)]   [(what:3)] what  [(the:9)] the  [(algorithm:7)] algorithm  [(theres:2)] theres  [(what:3)] what  [(the:3)] the  [(algorithm:3)] algorithm  [(and:1)]   [(what:1)]   [(it:1)]   [(would:7)] would  [(do:7)] do  [(if:8)] if  [(the:6)] the  [(comparson:1)(comparisiton:1)(comparison:5)(compariosn:1)] comparison  [(came:6)] came  [(out:5)] out  [(less:2)] less  [(it:2)] it  [(is:1)(come:1)]   [(greater:2)] greater  [(than:6)] than  [(or:2)] or  [(equal:2)] equal  [(to:2)] to  [(so:4)] so  [(we:1)]   [(are:1)(and:1)]   [(theres:1)(greater:1)]   [(so:1)]   [(came:1)]   [(out:2)] out  [(less:1)]   [(than:1)]   [(or:1)]   [(greater:2)] greater  [(than:2)] than  [(you:5)] you  [(can:5)] can  [(build:5)] build  [(a:5)] a  [(tree:5)] tree  [(in:8)] in  [(1:1)]   [(sense:1)]   [(this:6)] this  [(way:5)] way  [(so:2)] so  [(in:2)] in  [(some:5)] some  [(sense:5)] sense  [(sow:1)]   [(what:6)] what  [(this:4)] this  [(tree:6)] tree  [(is:6)] is  [(doing:4)] doing  [(is:4)] is  [(it:2)] it  [(is:2)] is  [(listin:1)(listing:7)] listing  [(aall:1)]   [(all:5)] all  [(the:3)] the  [(computer:1)(algorithm:1)]   [(would:1)]   [(do:1)]   [(if:1)]   [(came:1)]   [(out:2)] out  [(greater:1)(what:1)]   [(than:1)(the:1)]   [(tree:1)]   [(or:1)]   [(algorithm:1)]   [(is:2)] is  [(doing:2)] doing  [(is:1)]   [(considering:2)] considering  [(what:2)] what  [(would:2)] would  [(happen:2)] happen  [(for:3)] for  [(all:3)] all  [(possible:7)] possible  [(values:3)] values  [(executions:2)] executions  [(of:6)] of  [(this:3)] this  [(algorithm:3)] algorithm  [(comparisons:1)]   [(those:1)]   [(comparisons:1)(the:1)]   [(algorithm:1)]   [(so:9)] so  [(we:9)] we  [(will:9)] will  [(call:7)] call  [(these:4)] these  [(all:1)]  

 [(into:1)]   [(forks:1)]   [(the:1)]   [(left:1)]   [(subtree:2)] subtree  [(and:2)] and  [(the:2)] the  [(right:3)] right  [(subtree:2)] subtree  [(whenever:1)(whenver:1)]   [(it:4)] it  [(makes:3)] makes  [(a:5)] a  [(comparions:1)(comparison:4)] comparison  [(sub:1)]   [(tree:1)]   [(whwenver:1)]   [(it:1)]   [(makes:1)]   [(a:1)]   [(if:9)] if  [(you:1)]   [(we:9)] we  [(take:9)] take  [(a:9)] a  [(comparison:9)] comparison  [(sort:9)] sort  [(like:9)] like  [(a:1)]   [(merge:6)] merge  [(sort:6)] sort  [(mergesort:3)] mergesort  [(and:4)] and  [(it:5)] it  [(does:5)(sdoes:1)] does  [(lots:5)] lots  [(of:3)] of  [(stuff:4)] stuff  [(but:1)(stuff:1)]   [(at:4)] at  [(some:5)] some  [(point:5)] point  [(it:8)] it  [(does:3)] does  [(index:2)] index  [(okay:1)]   [(theres:3)] theres  [(a:1)]   [(arithmetic:1)(lot:1)]   [(of:1)(it:1)]   [(does:1)(stuff:1)]   [(makes:6)] makes  [(a:6)] a  [(comparision:1)(comparison:5)] comparison  [(okay:1)(and:1)]   [(there:4)(ther:1)] there  [(are:4)] are  [(2:7)] 2  [(halves:5)] halves  [(halfs:1)]   [(of:6)] of  [(recursion:1)]   [(whatever:1)]   [(and:1)]   [(it:1)]   [(is:1)]   [(what:3)] what  [(the:9)] the  [(algorithm:7)] algorithm  [(theres:2)] theres  [(what:3)] what  [(the:3)] the  [(algorithm:3)] algorithm  [(and:1)]   [(what:1)]   [(it:1)]   [(would:7)] would  [(do:7)] do  [(if:8)] if  [(the:6)] the  [(comparson:1)(comparisiton:1)(comparison:5)(compariosn:1)] comparison  [(came:6)] came  [(out:5)] out  [(less:2)] less  [(it:2)] it  [(is:1)(come:1)]   [(greater:2)] greater  [(than:6)] than  [(or:2)] or  [(equal:2)] equal  [(to:2)] to  [(so:4)] so  [(we:1)]   [(are:1)(and:1)]   [(theres:1)(greater:1)]   [(so:1)]   [(came:1)]   [(out:2)] out  [(less:1)]   [(than:1)]   [(or:1)]   [(greater:2)] greater  [(than:2)] than  [(you:5)] you  [(can:5)] can  [(build:5)] build  [(a:5)] a  [(tree:5)] tree  [(in:8)] in  [(1:1)]   [(sense:1)]   [(this:6)] this  [(way:5)] way  [(so:2)] so  [(in:2)] in  [(some:5)] some  [(sense:5)] sense  [(sow:1)]   [(what:6)] what  [(this:4)] this  [(tree:6)] tree  [(is:6)] is  [(doing:4)] doing  [(is:4)] is  [(it:2)] it  [(is:2)] is  [(listin:1)(listing:7)] listing  [(aall:1)]   [(all:5)] all  [(the:3)] the  [(computer:1)(algorithm:1)]   [(would:1)]   [(do:1)]   [(if:1)]   [(came:1)]   [(out:2)] out  [(greater:1)(what:1)]   [(than:1)(the:1)]   [(tree:1)]   [(or:1)]   [(algorithm:1)]   [(is:2)] is  [(doing:2)] doing  [(is:1)]   [(considering:2)] considering  [(what:2)] what  [(would:2)] would  [(happen:2)] happen  [(for:3)] for  [(all:3)] all  [(possible:7)] possible  [(values:3)] values  [(executions:2)] executions  [(of:6)] of  [(this:3)] this  [(algorithm:3)] algorithm  [(comparisons:1)]   [(those:1)]   [(comparisons:1)(the:1)]   [(algorithm:1)]   [(so:9)] so  [(we:9)] we  [(will:9)] will  [(call:7)] call  [(these:4)] these  [(all:1)]  
60
these(120380)all(121120)possible(121617)intruction(122639)traces(124119)you(125791)write(126119)down(127135)all(127612)of(128031)the(128407)instructions(128711)that(130737)are(131119)executed(131544)by(133840)this(134110)algorithm(134622)see(136102)what(137294)all(137702)the(138326)comparisons(138753)in(141210)the(141278)end(141828)you(142281)will(142381)get(143253)a(143581)tree(143838)now(144541)how(144997)big(145421)will(145901)that(146445)tree(146941)be(147654)as(162571)a(162883)function(163149)of(164283)yeah(167363)any(169979)possible(170515)list(172708)it(173322)will(173610)have(174194)good(175098)right(175965)if(176586)it(176957)is(177057)got(177562)to(178202)be(178458)able(178787)to(179297)sort(179497)
57
call(120045)these(120420)all(120981)possible(121397)insturciton(122221)traces(123440)so(124988)you(125349)write(125636)down(127166)all(127564)the(127916)instructions(128247)that(129460)are(129972)executed(130318)by(132004)this(132236)algortihm(132628)for(135452)all(135932)possible(136444)input(137196)arrays(137756)what(139268)the(139676)algorithm(139973)does(140956)in(141724)the(141956)end(142260)you(142521)will(142621)get(143436)a(143733)tree(143868)now(144628)how(145044)big(145396)will(145972)that(146412)tree(146828)be(147460)roughly(149973)as(162412)a(162668)function(162868)of(163611)good(174428)right(175715)if(177099)tis(177355)gotta(177812)be(178475)able(178811)to(179147)sort(179477)
38
possible(120910)instruction(123750)traces(130477)so(131589)you(132662)write(133133)down(134173)all(135533)possible(136560)arrays(138829)how(142197)they(142869)could(143966)come(145261)out(145966)how(147192)big(148078)will(148925)that(149541)tree(150293)be(151101)roughly(151958)as(162517)a(162988)function(163501)of(164700)yeah(167644)to(171285)sort(171676)any(172772)possible(173674)list(174839)it(175440)is(175540)gonna(176718)have(177740)all(178404)permutations(178996)
42
all(120248)possible(120648)instruction(121488)traces(125527)so(126407)you(126671)write(127015)down(127688)all(128144)the(128520)instructions(128940)that(130408)are(130768)executed(131168)by(132352)this(132712)for(134104)all(134456)possible(134888)input(135808)arrays(136424)now(143191)how(143584)big(143921)will(144303)that(144775)tree(145192)be(145760)as(161567)a(161807)function(162023)of(162848)good(175376)if(176536)it(176692)is(176792)gotta(177256)be(178032)able(178264)to(178769)sort(178968)every(179856)
45
these(120325)all(121189)possible(121868)construciton(124078)traces(126501)so(127956)you(129085)down(130910)all(131462)for(132756)all(133204)possible(133973)see(137247)how(138021)all(138526)of(139110)the(139510)comparisions(140389)can(142669)come(143277)out(143981)in(144429)the(144837)end(145341)you(146766)will(147309)get(148131)a(148729)tree(149430)so(150182)how(150765)big(151566)will(152317)tree(154613)be(155430)roughly(155957)as(161734)a(162166)function(162494)of(164094)yeah(166695)good(173918)right(177742)if(178919)it(179487)
49
all(120169)possible(120647)instruction(121679)traces(123868)so(124904)you(126239)down(127946)all(129138)these(129566)instructions(130247)so(135095)we(135816)see(136576)all(137340)the(137779)comparisons(138192)in(141160)the(141472)end(141808)you(142843)will(144360)get(144842)this(145232)tree(145680)now(146672)how(147335)big(148400)will(148865)that(149424)tree(149872)be(150504)roughly(152425)as(161261)a(161595)function(161793)of(162815)to(169707)all(171786)the(172706)permuations(172929)if(174821)it(175302)is(175402)got(176666)to(178226)be(178506)a(178890)list(179031)source(179683)
51
possible(120448)instruction(121837)traces(123677)so(125723)you(125989)write(126285)all(128011)the(128358)instructions(129063)for(132426)all(132894)possible(134007)how(136461)they(136854)could(137273)come(137876)and(138415)what(138793)the(139402)algorithm(139741)does(141210)and(142117)at(142444)the(142739)you(143292)will(143392)get(144186)a(144536)tree(145293)now(145963)how(146594)big(147098)will(147730)that(148283)tree(148854)be(149412)roughly(150805)as(163598)a(163833)function(164022)of(166366)good(173266)right(174856)if(176914)it(177143)is(177243)got(177861)to(178254)be(178526)able(179045)to(179601)
37
call(120072)these(120751)all(121462)possible(121965)instructino(123452)traces(125309)all(130117)possible(130611)input(133989)arrays(135509)what(138168)the(138599)argyrythnm(139017)does(143836)how(145830)big(146161)will(146826)that(147448)tree(147999)be(148668)roughly(150398)as(161726)a(162086)fun(162340)ction(163975)of(164836)yeah(166811)good(173487)right(174930)it(175820)is(175920)got(176687)to(177095)be(177425)able(177809)to(178348)sort(179496)
50
all(120007)possible(120437)instruction(121517)traces(122747)you(125197)write(125597)all(126677)the(127147)instructions(127417)that(128717)are(129187)executed(129547)by(131117)this(131327)algorithm(131787)for(132847)all(133227)possible(133667)input(134747)in(142197)the(142427)end(142767)you(143007)will(143107)get(143927)a(144317)tree(144467)now(145317)how(145687)big(146097)will(146557)that(147007)tree(147427)be(147997)roughly(149467)as(161797)a(162437)function(162607)of(163467)good(173537)right(174858)it(175988)is(176088)got(176828)to(177568)be(177808)able(178138)to(178628)sort(178908)every(179728)
50
these(120407)all(120916)possible(121845)instruction(123198)traces(124627)you(126461)write(127717)down(128644)all(129165)instructions(130197)executed(131862)by(133546)this(134007)algorithms(134529)in(139198)the(139502)end(139918)you(140280)will(140380)get(141214)a(141606)tree(141877)now(143610)how(144181)big(144822)will(145361)that(146006)tree(146600)be(147193)roughtly(148840)as(161271)a(161695)function(161966)of(163102)it(169441)has(169723)to(170157)sort(172166)any(172766)possible(173383)list(174407)if(175295)it(175664)is(175764)got(176395)to(176854)be(177223)able(178480)to(178974)sort(179247)
..............................................................................................................Number of Queue Removal: 110

Time spent in alignment:890 ms
Same Count = 0
Closed list size = 0
_		these		all		possible		_		intruction		_		traces		_		you		write		down		all		of		the		instructions		that		are		executed		by		this		algorithm		_		_		_		_		_		see		_		_		_		_		_		what		all		_		the		comparisons		_		_		_		_		_		_		in		_		_		_		_		_		_		_		the		end		_		_		_		_		you		will		get		a		_		tree		now		_		how		big		will		that		tree		be		_		as		a		_		_		function		of		yeah		_		_		_		_		any		possible		list		it		will		have		good		right		if		_		_		_		it		is		got		to		_		be		able		to		sort		_		_		_		_		_		
call		these		all		possible		_		_		insturciton		traces		so		you		write		down		all		_		the		instructions		that		are		executed		by		this		algortihm		for		all		possible		input		arrays		_		_		_		_		_		_		what		_		_		the		_		algorithm		does		_		_		_		_		in		_		_		_		_		_		_		_		the		end		_		_		_		_		you		will		get		a		_		tree		now		_		how		big		will		that		tree		be		roughly		as		a		_		_		function		of		_		_		_		_		_		_		_		_		_		_		_		good		right		if		tis		_		_		_		_		_		_		gotta		be		able		to		sort		_		_		_		_		_		
_		_		_		possible		_		instruction		_		traces		so		you		write		down		all		_		_		_		_		_		_		_		_		_		_		_		possible		_		arrays		_		how		they		could		come		out		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		how		big		will		that		tree		be		roughly		as		a		_		_		function		of		yeah		_		_		to		sort		any		possible		list		_		_		_		_		_		_		_		_		_		it		is		_		_		_		_		_		_		_		_		gonna		have		all		permutations		
_		_		all		possible		_		instruction		_		traces		so		you		write		down		all		_		the		instructions		that		are		executed		by		this		_		for		all		possible		input		arrays		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		now		_		how		big		will		that		tree		be		_		as		a		_		_		function		of		_		_		_		_		_		_		_		_		_		_		_		good		_		if		_		_		_		it		is		_		_		gotta		be		able		to		sort		every		_		_		_		_		
_		these		all		possible		construciton		_		_		traces		so		you		_		down		all		_		_		_		_		_		_		_		_		_		for		all		possible		_		_		see		how		_		_		_		_		_		all		of		the		comparisions		_		_		_		can		come		out		in		_		_		_		_		_		_		_		the		end		_		_		_		_		you		will		get		a		_		tree		_		so		how		big		will		_		tree		be		roughly		as		a		_		_		function		of		yeah		_		_		_		_		_		_		_		_		_		_		good		right		if		_		_		_		it		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		all		possible		_		instruction		_		traces		so		you		_		down		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		these		instructions		so		we		see		all		the		_		comparisons		in		the		end		you		will		get		_		this		tree		now		_		how		big		will		that		tree		be		roughly		as		a		_		_		function		of		_		_		_		to		_		_		_		_		_		all		the		_		_		_		_		permuations		if		it		is		got		to		_		be		_		_		_		_		_		a		list		source		
_		_		_		possible		_		instruction		_		traces		so		you		write		_		all		_		the		instructions		_		_		_		_		_		_		for		all		possible		_		_		_		how		they		could		come		and		what		_		_		the		_		algorithm		does		and		at		_		_		_		_		_		_		_		_		_		_		the		_		_		_		_		_		you		will		get		a		_		tree		now		_		how		big		will		that		tree		be		roughly		as		a		_		_		function		of		_		_		_		_		_		_		_		_		_		_		_		good		right		if		_		_		_		it		is		got		to		_		be		able		to		_		_		_		_		_		_		
call		these		all		possible		_		instructino		_		traces		_		_		_		_		all		_		_		_		_		_		_		_		_		_		_		_		possible		input		arrays		_		_		_		_		_		_		what		_		_		the		_		_		_		_		_		_		argyrythnm		_		does		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		how		big		will		that		tree		be		roughly		as		a		fun		ction		_		of		yeah		_		_		_		_		_		_		_		_		_		_		good		right		_		_		_		_		it		is		got		to		_		be		able		to		sort		_		_		_		_		_		
_		_		all		possible		_		instruction		_		traces		_		you		write		_		all		_		the		instructions		that		are		executed		by		this		algorithm		for		all		possible		input		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		_		the		end		_		_		_		_		you		will		get		a		_		tree		now		_		how		big		will		that		tree		be		roughly		as		a		_		_		function		of		_		_		_		_		_		_		_		_		_		_		_		good		right		_		_		_		_		it		is		got		to		_		be		able		to		sort		every		_		_		_		_		
_		these		all		possible		_		instruction		_		traces		_		you		write		down		all		_		_		instructions		_		_		executed		by		this		algorithms		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		_		the		end		_		_		_		_		you		will		get		a		_		tree		now		_		how		big		will		that		tree		be		roughtly		as		a		_		_		function		of		_		it		has		to		sort		any		possible		list		_		_		_		_		_		if		_		_		_		it		is		got		to		_		be		able		to		sort		_		_		_		_		_		

call these all possible construciton instruction insturciton traces so you write down all of the instructions that are executed by this algorithm for all possible input arrays see how they could come and what all of the comparisions algorithm does and can come argyrythnm in does these instructions so we see all the end comparisons in the end you will get a this tree now so how big will that tree be roughly as a fun ction function of yeah it has to sort any possible list it will have good right if tis permuations if it is got to gotta be able to sort every gonna have list source 

call these all possible construciton instruction insturciton traces so you write down all of the instructions that are executed by this algorithm for all possible input arrays see how they could come and what all of the comparisions algorithm does and can come argyrythnm in does these instructions so we see all the end comparisons in the end you will get a this tree now so how big will that tree be roughly as a fun ction function of yeah it has to sort any possible list it will have good right if tis permuations if it is got to gotta be able to sort every gonna have list source 

 [(call:2)] call  [(these:5)] these  [(all:8)] all  [(possible:10)] possible  [(construciton:1)]   [(instruction:6)(instructino:1)(intruction:1)] instruction  [(insturciton:1)]   [(traces:10)] traces  [(so:6)] so  [(you:9)] you  [(write:7)] write  [(down:7)] down  [(all:10)] all  [(of:1)]   [(the:5)] the  [(instructions:6)] instructions  [(that:4)] that  [(are:4)] are  [(executed:5)] executed  [(by:5)] by  [(this:5)] this  [(algortihm:1)(algorithms:1)(algorithm:2)] algorithm  [(for:5)] for  [(all:5)] all  [(possible:7)] possible  [(input:4)] input  [(arrays:4)] arrays  [(see:2)] see  [(how:3)] how  [(they:2)] they  [(could:2)] could  [(come:2)] come  [(and:1)(out:1)]   [(what:4)] what  [(all:2)] all  [(of:1)]   [(the:5)] the  [(comparisions:1)(comparisons:1)]   [(algorithm:2)] algorithm  [(does:2)] does  [(and:1)]   [(can:1)(at:1)]   [(come:1)]   [(argyrythnm:1)(out:1)]   [(in:5)] in  [(does:1)]   [(these:1)]   [(instructions:1)]   [(so:1)]   [(we:1)]   [(see:1)]   [(all:1)]   [(the:7)] the  [(end:5)] end  [(comparisons:1)]   [(in:1)]   [(the:1)]   [(end:1)]   [(you:7)] you  [(will:7)] will  [(get:7)] get  [(a:6)] a  [(this:1)]   [(tree:7)] tree  [(now:7)] now  [(so:1)]   [(how:10)] how  [(big:10)] big  [(will:10)] will  [(that:9)] that  [(tree:10)] tree  [(be:10)] be  [(roughtly:1)(roughly:7)] roughly  [(as:10)] as  [(a:10)] a  [(fun:1)]   [(ction:1)]   [(function:9)] function  [(of:10)] of  [(yeah:4)] yeah  [(it:1)]   [(has:1)]   [(to:3)] to  [(sort:2)] sort  [(any:3)] any  [(possible:3)] possible  [(list:3)] list  [(it:1)]   [(will:1)(all:1)]   [(have:1)(the:1)]   [(good:7)] good  [(right:6)] right  [(if:6)] if  [(tis:1)]   [(permuations:1)]   [(if:1)]   [(it:9)] it  [(is:8)] is  [(got:6)] got  [(to:6)] to  [(gotta:2)] gotta  [(be:8)] be  [(able:7)] able  [(to:7)] to  [(sort:6)] sort  [(every:2)] every  [(gonna:1)]   [(have:1)(a:1)]   [(list:1)(all:1)]   [(source:1)(permutations:1)]  

 [(call:2)] call  [(these:5)] these  [(all:8)] all  [(possible:10)] possible  [(construciton:1)]   [(instruction:6)(instructino:1)(intruction:1)] instruction  [(insturciton:1)]   [(traces:10)] traces  [(so:6)] so  [(you:9)] you  [(write:7)] write  [(down:7)] down  [(all:10)] all  [(of:1)]   [(the:5)] the  [(instructions:6)] instructions  [(that:4)] that  [(are:4)] are  [(executed:5)] executed  [(by:5)] by  [(this:5)] this  [(algortihm:1)(algorithms:1)(algorithm:2)] algorithm  [(for:5)] for  [(all:5)] all  [(possible:7)] possible  [(input:4)] input  [(arrays:4)] arrays  [(see:2)] see  [(how:3)] how  [(they:2)] they  [(could:2)] could  [(come:2)] come  [(and:1)(out:1)]   [(what:4)] what  [(all:2)] all  [(of:1)]   [(the:5)] the  [(comparisions:1)(comparisons:1)]   [(algorithm:2)] algorithm  [(does:2)] does  [(and:1)]   [(can:1)(at:1)]   [(come:1)]   [(argyrythnm:1)(out:1)]   [(in:5)] in  [(does:1)]   [(these:1)]   [(instructions:1)]   [(so:1)]   [(we:1)]   [(see:1)]   [(all:1)]   [(the:7)] the  [(end:5)] end  [(comparisons:1)]   [(in:1)]   [(the:1)]   [(end:1)]   [(you:7)] you  [(will:7)] will  [(get:7)] get  [(a:6)] a  [(this:1)]   [(tree:7)] tree  [(now:7)] now  [(so:1)]   [(how:10)] how  [(big:10)] big  [(will:10)] will  [(that:9)] that  [(tree:10)] tree  [(be:10)] be  [(roughtly:1)(roughly:7)] roughly  [(as:10)] as  [(a:10)] a  [(fun:1)]   [(ction:1)]   [(function:9)] function  [(of:10)] of  [(yeah:4)] yeah  [(it:1)]   [(has:1)]   [(to:3)] to  [(sort:2)] sort  [(any:3)] any  [(possible:3)] possible  [(list:3)] list  [(it:1)]   [(will:1)(all:1)]   [(have:1)(the:1)]   [(good:7)] good  [(right:6)] right  [(if:6)] if  [(tis:1)]   [(permuations:1)]   [(if:1)]   [(it:9)] it  [(is:8)] is  [(got:6)] got  [(to:6)] to  [(gotta:2)] gotta  [(be:8)] be  [(able:7)] able  [(to:7)] to  [(sort:6)] sort  [(every:2)] every  [(gonna:1)]   [(have:1)(a:1)]   [(list:1)(all:1)]   [(source:1)(permutations:1)]  

 [(call:2)] call  [(these:5)] these  [(all:8)] all  [(possible:10)] possible  [(construciton:1)]   [(instruction:6)(instructino:1)(intruction:1)] instruction  [(insturciton:1)]   [(traces:10)] traces  [(so:6)] so  [(you:9)] you  [(write:7)] write  [(down:7)] down  [(all:10)] all  [(of:1)]   [(the:5)] the  [(instructions:6)] instructions  [(that:4)] that  [(are:4)] are  [(executed:5)] executed  [(by:5)] by  [(this:5)] this  [(algortihm:1)(algorithms:1)(algorithm:2)] algorithm  [(for:5)] for  [(all:5)] all  [(possible:7)] possible  [(input:4)] input  [(arrays:4)] arrays  [(see:2)] see  [(how:3)] how  [(they:2)] they  [(could:2)] could  [(come:2)] come  [(and:1)(out:1)]   [(what:4)] what  [(all:2)] all  [(of:1)]   [(the:5)] the  [(comparisions:1)(comparisons:1)]   [(algorithm:2)] algorithm  [(does:2)] does  [(and:1)]   [(can:1)(at:1)]   [(come:1)]   [(argyrythnm:1)(out:1)]   [(in:5)] in  [(does:1)]   [(these:1)]   [(instructions:1)]   [(so:1)]   [(we:1)]   [(see:1)]   [(all:1)]   [(the:7)] the  [(end:5)] end  [(comparisons:1)]   [(in:1)]   [(the:1)]   [(end:1)]   [(you:7)] you  [(will:7)] will  [(get:7)] get  [(a:6)] a  [(this:1)]   [(tree:7)] tree  [(now:7)] now  [(so:1)]   [(how:10)] how  [(big:10)] big  [(will:10)] will  [(that:9)] that  [(tree:10)] tree  [(be:10)] be  [(roughtly:1)(roughly:7)] roughly  [(as:10)] as  [(a:10)] a  [(fun:1)]   [(ction:1)]   [(function:9)] function  [(of:10)] of  [(yeah:4)] yeah  [(it:1)]   [(has:1)]   [(to:3)] to  [(sort:2)] sort  [(any:3)] any  [(possible:3)] possible  [(list:3)] list  [(it:1)]   [(will:1)(all:1)]   [(have:1)(the:1)]   [(good:7)] good  [(right:6)] right  [(if:6)] if  [(tis:1)]   [(permuations:1)]   [(if:1)]   [(it:9)] it  [(is:8)] is  [(got:6)] got  [(to:6)] to  [(gotta:2)] gotta  [(be:8)] be  [(able:7)] able  [(to:7)] to  [(sort:6)] sort  [(every:2)] every  [(gonna:1)]   [(have:1)(a:1)]   [(list:1)(all:1)]   [(source:1)(permutations:1)]  
71
every(181449)possible(182205)list(183233)of(184537)length(184841)theres(186965)a(187793)lot(187963)of(188393)permutations(188744)on(190357)elements(191241)there(193402)is(194176)factorial(195016)them(196848)so(197434)this(197687)tree(198601)is(199351)going(200575)to(201576)be(201589)huge(201791)even(203054)though(203498)in(204183)some(204464)cases(204883)maybe(206071)we(206718)could(207023)it(207755)is(207855)not(208350)a(209291)very(209519)representation(211102)it(213802)is(213902)a(214438)very(214694)succint(215341)represenation(216462)of(218341)this(218645)which(221309)is(222120)not(222397)useful(222813)if(223685)you(224069)wanted(224524)to(225172)implement(225498)the(226612)algorithm(227116)we(229388)can(229740)use(230222)this(230564)is(231124)as(233645)a(234010)tool(234294)into(236883)a(237411)decision(237731)tree(238763)and(239411)now(239747)
76
every(180643)possible(181268)list(182059)of(182493)length(182988)at(184412)the(184675)leaves(184971)i(185755)have(185934)to(186219)have(186651)all(187043)the(187387)possible(187699)permutations(188683)of(190595)factorial(195355)is(196602)exponential(197467)it(199035)really(199538)big(200379)that(200830)is(200930)why(201498)we(201899)do(202503)not(202603)write(203723)algoirthms(204290)down(205610)as(206204)a(207098)decision(207250)tree(208090)these(210634)algorithms(211274)you(212418)write(213035)them(213506)down(213970)in(214594)pseudocode(215442)here(218074)the(218482)length(218771)depends(219554)on(220405)and(221434)it(221802)depends(222226)exponentially(223282)on(224722)writing(226114)down(226986)the(227378)algorithm(227850)would(228770)take(229411)a(229882)long(230098)time(230819)nonetheless(231874)we(233538)can(233850)use(234210)this(234474)as(234930)a(235196)tool(235428)any(236378)algorithm(236853)can(238165)be(238538)transformed(238898)
43
at(181852)the(183268)leaves(183660)i(185388)have(185753)to(186565)have(187082)all(187911)the(188499)permutations(188916)of(191252)those(191764)factorial(196452)is(198692)exponential(199203)that(201615)is(201715)why(202835)we(203651)don(204435)they(212643)have(213595)constant(214251)length(215827)here(218603)the(219299)length(219787)depends(221755)on(223300)and(224281)it(225205)depends(225859)exponentially(227379)on(229955)but(231971)nonethless(232738)we(235122)could(235635)use(236351)this(237043)as(237659)a(238410)tool(238762)
86
possible(180521)list(181361)of(181769)length(182018)at(183241)the(183705)least(184082)i(184601)have(184777)to(185113)have(185313)all(185657)the(186025)permutations(186297)of(187305)those(187585)elements(187969)is(194096)exponential(194313)it(196012)is(196112)really(196896)big(198201)so(199201)this(199481)tree(199833)is(200345)going(200593)to(202337)be(202521)huge(202769)it(203277)is(203377)going(203857)to(204313)be(205217)exponential(205457)on(206865)these(208361)algorithms(208969)you(211920)know(212288)you(212840)write(213336)them(213864)down(214280)in(214672)pseudocode(215273)they(217217)have(217769)constant(218177)length(218881)not(220841)useful(221177)if(221745)you(221961)wanted(222329)to(222985)implement(223433)the(225025)algorithm(225289)because(226561)down(228336)the(228864)algorithm(229224)would(230176)take(230672)a(231080)long(231208)time(231728)any(232344)algorithm(232753)can(233849)be(234121)transformed(234337)in(235536)this(235752)way(236176)into(236584)a(236992)decision(237216)and(238632)now(238944)we(239328)have(239569)this(239936)
47
has(180113)to(180596)be(180980)able(181396)to(182054)so(184431)that(184780)is(184880)a(185719)lot(186215)of(187311)permutations(187967)it(193423)this(197280)tree(198113)is(198911)huge(199351)that(200683)is(200783)why(202265)we(203298)do(203630)not(203730)write(204694)algorythems(205682)down(209336)as(209936)a(210344)descision(210760)they(213800)have(215144)constant(216151)length(219732)it(221584)depends(221984)on(223712)writing(226672)dwon(227896)the(228768)algorythem(229336)would(231698)take(232632)a(233760)long(234048)time(234937)any(235936)algorythem(237521)
69
at(180572)the(180862)least(181207)i(182125)have(182306)to(182767)have(183786)all(184279)the(184747)permuations(185027)of(187066)all(187437)the(188659)factorial(192227)is(193379)really(194142)big(194874)this(195638)tree(196190)is(196769)huge(197348)that(198047)is(198147)why(198834)we(199363)do(199696)not(199796)write(200583)algorithms(201499)down(203350)it(204756)is(204856)not(205491)a(207612)very(207920)very(207920)compact(208606)representation(209564)if(212485)you(212712)write(213239)this(213828)down(214396)in(214940)pseudocode(215316)not(219597)useful(220695)if(221708)you(221942)want(222284)to(222741)implement(223164)the(225061)algorithm(225570)non(227629)the(228658)less(229174)we(229874)can(230277)use(230717)this(231197)a(231750)a(234590)tool(234871)now(238030)we(238494)have(238831)this(239245)observation(239767)
60
sort(180055)every(180651)possible(181303)list(182757)of(183269)length(183538)theres(185526)a(187023)lot(187251)of(187750)permutations(188106)on(191474)elements(192528)so(194495)this(194769)tree(195230)is(195787)huge(195996)exponential(197148)in(199250)the(199790)input(200204)size(200859)it(204448)is(204548)not(204869)very(205373)compact(206552)representation(207815)they(211294)have(211644)constant(212059)length(214491)here(215738)the(216193)length(216602)on(217960)and(219698)it(220509)depends(222549)exponentially(223745)on(226128)nonetheless(227054)we(228957)can(229335)use(229765)this(230273)as(230705)a(230979)tool(231442)into(234581)a(235033)decision(235263)tree(236637)and(237256)now(237826)we(238270)have(238508)this(238964)obvertaiont(239471)
45
every(180305)possible(181647)so(184834)that(185018)is(185118)a(185847)lot(186057)elements(187802)factorial(189915)really(192837)big(193657)this(194738)tree(195356)is(196061)huge(196610)going(197859)to(198391)be(198640)exponetion(199060)some(203469)case(204259)we(204858)could(205802)not(206774)a(207181)very(207797)good(208407)compact(208925)constant(211309)lang(213230)length(216565)depends(218819)on(220205)writting(224276)down(226296)the(226710)a(227305)tool(229427)to(230439)anaylis(230648)transformed(234679)in(238231)this(238548)way(239435)to(239787)
57
possible(180358)list(181998)of(183168)that(186618)is(186718)a(187368)lot(187508)theres(188538)a(189378)lot(189548)of(189978)permutations(190258)of(193838)so(195078)this(195428)tree(196108)is(196688)huge(197068)that(200098)is(200198)why(202698)we(203148)do(203368)not(203468)right(203988)algorithms(205078)down(207278)as(207768)a(208318)decision(208508)tree(210688)here(215268)the(216048)length(216338)depends(217108)on(217928)and(218788)depends(219108)exponentially(220518)on(222598)but(227608)none(228118)the(228768)less(229548)we(230968)can(231348)use(231738)this(232128)as(232768)a(233078)tool(233318)and(236598)now(237038)we(238298)have(238588)this(239058)observation(239428)
49
every(180352)possible(181633)list(183135)of(183792)size(184143)that(185266)is(185366)a(186582)lot(186936)of(188767)permutations(189224)on(191491)elemenst(192284)factorial(194916)is(196876)huge(197255)that(200258)is(200358)why(201250)we(201904)do(202267)not(202367)rnite(203697)algorithms(205500)in(207197)decisions(208398)trees(212464)here(215659)the(216080)length(216352)of(219284)the(219696)algorithm(220234)depends(221809)on(222832)and(224023)depends(226393)on(227582)exponentially(228384)we(231185)have(231536)all(232094)of(232747)these(233148)any(235209)algorithm(235744)can(237081)be(237624)confirmed(238017)
........................................................................................................................................................................................................................Number of Queue Removal: 216

Time spent in alignment:2186 ms
Same Count = 0
Closed list size = 0
_		every		possible		list		of		length		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		theres		a		lot		of		_		_		_		_		permutations		on		elements		there		_		_		is		factorial		them		so		_		_		_		_		_		_		_		_		_		_		_		this		tree		is		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		going		to		be		huge		even		though		in		_		some		cases		maybe		we		could		_		_		_		it		is		not		a		very		_		_		representation		it		is		a		very		succint		represenation		of		this		which		is		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		not		useful		if		you		wanted		to		implement		the		algorithm		_		_		_		_		_		_		_		_		_		_		_		_		_		we		can		_		use		this		is		as		_		a		tool		_		_		_		_		_		_		_		_		_		_		_		_		_		into		a		decision		tree		and		now		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		every		possible		list		of		length		at		the		leaves		i		have		to		have		all		the		possible		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		permutations		_		_		_		of		_		_		factorial		_		_		_		_		_		_		is		exponential		it		_		really		big		_		_		_		_		_		that		is		why		we		do		not		write		_		algoirthms		down		as		a		decision		tree		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		these		algorithms		you		write		them		down		in		pseudocode		here		the		length		_		depends		on		and		it		depends		exponentially		on		_		writing		_		down		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		algorithm		_		_		_		_		_		_		_		would		take		a		long		time		nonetheless		we		can		_		use		this		_		as		_		a		tool		_		_		_		any		_		algorithm		can		be		transformed		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		_		_		_		_		at		the		leaves		i		have		to		have		all		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		permutations		_		_		_		of		those		_		factorial		_		_		_		_		_		_		is		exponential		_		_		_		_		_		_		_		_		_		that		is		why		we		_		_		_		_		_		_		_		_		_		_		_		_		_		_		don		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		they		have		constant		length		_		_		_		_		_		_		_		_		_		here		the		length		_		depends		on		and		it		depends		exponentially		on		but		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		nonethless		_		_		_		_		_		_		_		_		_		_		_		we		_		could		use		this		_		as		_		a		tool		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		possible		list		of		length		at		the		least		i		have		to		have		all		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		permutations		_		_		_		of		those		elements		_		_		_		_		_		_		_		is		exponential		it		is		really		big		so		this		tree		is		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		going		to		be		huge		_		_		_		_		_		_		_		_		_		_		_		_		it		is		_		_		_		_		_		_		_		_		going		to		be		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		exponential		on		_		_		_		_		these		algorithms		you		know		you		write		them		down		in		pseudocode		they		have		constant		length		not		useful		if		you		wanted		to		implement		the		algorithm		_		_		_		because		down		the		algorithm		would		take		a		long		time		_		_		_		_		_		_		_		_		_		_		_		_		_		_		any		_		algorithm		can		be		transformed		in		this		way		_		into		a		decision		_		and		now		we		have		this		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		has		to		be		able		to		so		that		is		_		a		lot		of		_		_		_		_		permutations		_		_		_		_		_		_		_		_		_		it		_		_		_		_		_		_		_		_		_		_		this		tree		is		huge		that		is		why		we		do		not		write		_		algorythems		down		as		a		descision		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		they		have		constant		length		_		_		_		_		_		_		_		_		_		_		_		_		it		depends		on		_		_		_		_		_		_		writing		dwon		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		_		algorythem		_		_		_		_		_		_		would		take		a		long		time		_		_		_		_		_		_		_		_		_		_		_		_		_		_		any		algorythem		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		_		_		_		_		at		the		least		i		have		to		have		all		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		permuations		_		_		_		of		_		_		_		_		_		_		all		the		factorial		is		_		_		_		really		big		_		this		tree		is		huge		that		is		why		we		do		not		write		_		algorithms		down		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		it		is		not		a		very		very		compact		representation		if		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		you		write		this		down		in		pseudocode		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		not		useful		if		you		want		to		implement		the		algorithm		_		_		_		_		non		the		less		_		_		_		_		_		_		we		can		_		use		this		_		_		a		a		tool		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		now		we		have		this		observation		_		_		_		_		_		_		_		_		_		_		_		_		_		
sort		every		possible		list		of		length		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		theres		a		lot		of		_		_		_		_		permutations		on		elements		_		_		_		_		_		_		so		_		_		_		_		_		_		_		_		_		_		_		this		tree		is		huge		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		exponential		in		_		_		_		_		_		_		the		input		size		it		is		not		_		very		_		compact		representation		_		_		_		_		_		_		_		_		_		_		they		have		constant		length		_		_		_		_		_		_		_		_		_		here		the		length		_		_		on		and		it		depends		exponentially		on		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		nonetheless		_		_		_		_		_		_		_		_		_		_		_		we		can		_		use		this		_		as		_		a		tool		_		_		_		_		_		_		_		_		_		_		_		_		_		into		a		decision		tree		and		now		we		have		this		obvertaiont		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		every		possible		_		_		_		_		_		_		_		_		_		_		_		_		_		so		_		_		_		_		_		_		that		is		_		a		lot		_		_		_		_		_		_		_		elements		_		_		_		_		factorial		_		_		_		_		_		_		_		_		_		_		really		big		_		this		tree		is		huge		_		_		_		_		_		_		_		_		_		_		_		_		_		_		going		to		be		_		_		_		_		exponetion		some		case		_		we		could		_		_		_		_		_		not		a		very		good		compact		_		_		_		_		_		_		_		_		_		_		_		_		_		constant		_		lang		_		_		_		_		_		_		_		_		_		_		length		_		depends		on		_		_		_		_		_		_		writting		_		down		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		a		tool		to		anaylis		_		_		_		_		_		_		transformed		in		this		way		to		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		_		possible		list		of		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		that		is		_		a		lot		_		theres		a		lot		of		permutations		_		_		_		of		_		_		_		_		so		_		_		_		_		_		_		_		_		_		_		_		this		tree		is		huge		that		is		why		we		do		not		_		right		algorithms		down		as		a		decision		tree		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		here		the		length		_		depends		on		and		_		depends		exponentially		on		but		_		none		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		_		_		_		less		_		_		_		_		_		_		_		_		_		_		we		can		_		use		this		_		as		_		a		tool		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		and		now		we		have		this		observation		_		_		_		_		_		_		_		_		_		_		_		_		_		
_		every		possible		list		of		_		_		_		_		_		_		_		_		_		_		_		size		_		_		_		_		_		_		that		is		_		a		lot		of		_		_		_		_		permutations		on		elemenst		_		_		_		_		factorial		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		is		huge		that		is		why		we		do		not		_		rnite		algorithms		_		_		_		_		_		_		_		_		_		_		_		in		_		_		_		_		_		_		_		decisions		trees		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		here		the		length		_		_		_		_		_		_		_		_		_		_		_		of		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		algorithm		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		depends		on		_		_		_		_		_		_		_		_		_		_		_		_		_		_		and		_		_		_		_		_		depends		on		exponentially		we		have		all		of		these		any		algorithm		can		be		confirmed		

sort every possible list of length at the least i have to have all the possible so has to be able to so that is theres a lot of theres a lot of permutations on elements there of those is factorial them so it all the factorial is exponential it is really big so this tree is huge that is why we do not write rnite algorithms down as a decision tree going to be huge don exponential in exponetion some cases maybe we could the input trees it is not a very good compact representation it is going to succint represenation of this which is they have constant length lang these algorithms you write them down in pseudocode here the length it depends on and it depends exponentially on but writing dwon down these algorithms you know you write them down in pseudocode they have constant length not useful if you wanted to implement the algorithm algorythem nonethless less because down the less would take a long time nonetheless we can could use this is as a a tool to depends on any algorythem algorithm can be transformed in this way to into a decision tree and now we have this observation depends on exponentially we have all of these any algorithm can be confirmed 

sort every possible list of length at the least i have to have all the possible so has to be able to so that is theres a lot of theres a lot of permutations on elements there of those is factorial them so it all the factorial is exponential it is really big so this tree is huge that is why we do not write rnite algorithms down as a decision tree going to be huge don exponential in exponetion some cases maybe we could the input trees it is not a very good compact representation it is going to succint represenation of this which is they have constant length lang these algorithms you write them down in pseudocode here the length it depends on and it depends exponentially on but writing dwon down these algorithms you know you write them down in pseudocode they have constant length not useful if you wanted to implement the algorithm algorythem nonethless less because down the less would take a long time nonetheless we can could use this is as a a tool to depends on any algorythem algorithm can be transformed in this way to into a decision tree and now we have this observation depends on exponentially we have all of these any algorithm can be confirmed 

 [(sort:1)]   [(every:5)] every  [(possible:7)] possible  [(list:6)] list  [(of:6)] of  [(length:4)] length  [(at:4)] at  [(the:4)] the  [(least:2)(leaves:2)] least  [(i:4)] i  [(have:4)] have  [(to:4)] to  [(have:4)] have  [(all:4)] all  [(the:4)] the  [(possible:1)]   [(so:1)(size:1)]   [(has:1)]   [(to:1)]   [(be:1)]   [(able:1)]   [(to:1)]   [(so:1)]   [(that:4)] that  [(is:4)] is  [(theres:2)] theres  [(a:6)] a  [(lot:6)] lot  [(of:4)] of  [(theres:1)]   [(a:1)]   [(lot:1)]   [(of:1)]   [(permutations:8)(permuations:1)] permutations  [(on:3)] on  [(elemenst:1)(elements:3)] elements  [(there:1)]   [(of:5)] of  [(those:2)] those  [(is:1)(elements:1)]   [(factorial:5)] factorial  [(them:1)]   [(so:3)] so  [(it:1)]   [(all:1)]   [(the:1)]   [(factorial:1)]   [(is:4)] is  [(exponential:3)] exponential  [(it:2)] it  [(is:1)]   [(really:4)] really  [(big:4)] big  [(so:1)]   [(this:7)] this  [(tree:7)] tree  [(is:8)] is  [(huge:6)] huge  [(that:6)] that  [(is:6)] is  [(why:6)] why  [(we:6)] we  [(do:5)] do  [(not:5)] not  [(write:3)] write  [(rnite:1)(right:1)]   [(algorythems:1)(algorithms:3)(algoirthms:1)] algorithms  [(down:4)] down  [(as:3)] as  [(a:3)] a  [(decision:2)(descision:1)] decision  [(tree:2)] tree  [(going:3)] going  [(to:3)] to  [(be:3)] be  [(huge:2)] huge  [(don:1)(even:1)]   [(exponential:1)(though:1)]   [(in:3)] in  [(exponetion:1)]   [(some:2)] some  [(cases:1)(case:1)]   [(maybe:1)]   [(we:2)] we  [(could:2)] could  [(the:1)]   [(input:1)(decisions:1)]   [(trees:1)(size:1)]   [(it:4)] it  [(is:4)] is  [(not:4)] not  [(a:3)] a  [(very:4)] very  [(good:1)(very:1)]   [(compact:3)] compact  [(representation:3)] representation  [(it:1)(if:1)]   [(is:1)]   [(going:1)(a:1)]   [(to:1)(very:1)]   [(succint:1)(be:1)]   [(represenation:1)]   [(of:1)]   [(this:1)]   [(which:1)]   [(is:1)]   [(they:3)] they  [(have:3)] have  [(constant:4)] constant  [(length:3)] length  [(lang:1)]   [(these:1)]   [(algorithms:1)]   [(you:2)] you  [(write:2)] write  [(them:1)(this:1)]   [(down:2)] down  [(in:2)] in  [(pseudocode:2)] pseudocode  [(here:5)] here  [(the:5)] the  [(length:6)] length  [(it:1)]   [(depends:5)] depends  [(on:6)] on  [(and:4)] and  [(it:3)] it  [(depends:4)] depends  [(exponentially:4)(exponential:1)] exponentially  [(on:5)] on  [(but:2)] but  [(writing:2)(writting:1)] writing  [(dwon:1)(none:1)]   [(of:1)(down:2)] down  [(these:1)]   [(algorithms:1)]   [(you:1)]   [(know:1)]   [(you:1)]   [(write:1)]   [(them:1)]   [(down:1)]   [(in:1)]   [(pseudocode:1)]   [(they:1)]   [(have:1)]   [(constant:1)]   [(length:1)]   [(not:3)] not  [(useful:3)] useful  [(if:3)] if  [(you:3)] you  [(want:1)(wanted:2)] wanted  [(to:3)] to  [(implement:3)] implement  [(the:8)] the  [(algorithm:5)] algorithm  [(algorythem:1)]   [(nonethless:1)(nonetheless:1)]   [(less:1)]   [(because:1)]   [(down:1)(non:1)]   [(the:2)] the  [(less:1)(algorithm:1)]   [(would:3)] would  [(take:3)] take  [(a:3)] a  [(long:3)] long  [(time:3)] time  [(nonetheless:1)]   [(we:6)] we  [(can:5)] can  [(could:1)]   [(use:6)] use  [(this:6)] this  [(is:1)]   [(as:5)] as  [(a:1)]   [(a:7)] a  [(tool:7)] tool  [(to:1)]   [(depends:1)(anaylis:1)]   [(on:1)]   [(any:3)] any  [(algorythem:1)]   [(algorithm:2)] algorithm  [(can:2)] can  [(be:2)] be  [(transformed:3)] transformed  [(in:2)] in  [(this:2)] this  [(way:2)] way  [(to:1)]   [(into:3)] into  [(a:3)] a  [(decision:3)] decision  [(tree:2)] tree  [(and:5)] and  [(now:5)] now  [(we:4)] we  [(have:4)] have  [(this:4)] this  [(observation:2)(obvertaiont:1)] observation  [(depends:1)]   [(on:1)]   [(exponentially:1)]   [(we:1)]   [(have:1)]   [(all:1)]   [(of:1)]   [(these:1)]   [(any:1)]   [(algorithm:1)]   [(can:1)]   [(be:1)]   [(confirmed:1)]  

 [(sort:1)]   [(every:5)] every  [(possible:7)] possible  [(list:6)] list  [(of:6)] of  [(length:4)] length  [(at:4)] at  [(the:4)] the  [(least:2)(leaves:2)] least  [(i:4)] i  [(have:4)] have  [(to:4)] to  [(have:4)] have  [(all:4)] all  [(the:4)] the  [(possible:1)]   [(so:1)(size:1)]   [(has:1)]   [(to:1)]   [(be:1)]   [(able:1)]   [(to:1)]   [(so:1)]   [(that:4)] that  [(is:4)] is  [(theres:2)] theres  [(a:6)] a  [(lot:6)] lot  [(of:4)] of  [(theres:1)]   [(a:1)]   [(lot:1)]   [(of:1)]   [(permutations:8)(permuations:1)] permutations  [(on:3)] on  [(elemenst:1)(elements:3)] elements  [(there:1)]   [(of:5)] of  [(those:2)] those  [(is:1)(elements:1)]   [(factorial:5)] factorial  [(them:1)]   [(so:3)] so  [(it:1)]   [(all:1)]   [(the:1)]   [(factorial:1)]   [(is:4)] is  [(exponential:3)] exponential  [(it:2)] it  [(is:1)]   [(really:4)] really  [(big:4)] big  [(so:1)]   [(this:7)] this  [(tree:7)] tree  [(is:8)] is  [(huge:6)] huge  [(that:6)] that  [(is:6)] is  [(why:6)] why  [(we:6)] we  [(do:5)] do  [(not:5)] not  [(write:3)] write  [(rnite:1)(right:1)]   [(algorythems:1)(algorithms:3)(algoirthms:1)] algorithms  [(down:4)] down  [(as:3)] as  [(a:3)] a  [(decision:2)(descision:1)] decision  [(tree:2)] tree  [(going:3)] going  [(to:3)] to  [(be:3)] be  [(huge:2)] huge  [(don:1)(even:1)]   [(exponential:1)(though:1)]   [(in:3)] in  [(exponetion:1)]   [(some:2)] some  [(cases:1)(case:1)]   [(maybe:1)]   [(we:2)] we  [(could:2)] could  [(the:1)]   [(input:1)(decisions:1)]   [(trees:1)(size:1)]   [(it:4)] it  [(is:4)] is  [(not:4)] not  [(a:3)] a  [(very:4)] very  [(good:1)(very:1)]   [(compact:3)] compact  [(representation:3)] representation  [(it:1)(if:1)]   [(is:1)]   [(going:1)(a:1)]   [(to:1)(very:1)]   [(succint:1)(be:1)]   [(represenation:1)]   [(of:1)]   [(this:1)]   [(which:1)]   [(is:1)]   [(they:3)] they  [(have:3)] have  [(constant:4)] constant  [(length:3)] length  [(lang:1)]   [(these:1)]   [(algorithms:1)]   [(you:2)] you  [(write:2)] write  [(them:1)(this:1)]   [(down:2)] down  [(in:2)] in  [(pseudocode:2)] pseudocode  [(here:5)] here  [(the:5)] the  [(length:6)] length  [(it:1)]   [(depends:5)] depends  [(on:6)] on  [(and:4)] and  [(it:3)] it  [(depends:4)] depends  [(exponentially:4)(exponential:1)] exponentially  [(on:5)] on  [(but:2)] but  [(writing:2)(writting:1)] writing  [(dwon:1)(none:1)]   [(of:1)(down:2)] down  [(these:1)]   [(algorithms:1)]   [(you:1)]   [(know:1)]   [(you:1)]   [(write:1)]   [(them:1)]   [(down:1)]   [(in:1)]   [(pseudocode:1)]   [(they:1)]   [(have:1)]   [(constant:1)]   [(length:1)]   [(not:3)] not  [(useful:3)] useful  [(if:3)] if  [(you:3)] you  [(want:1)(wanted:2)] wanted  [(to:3)] to  [(implement:3)] implement  [(the:8)] the  [(algorithm:5)] algorithm  [(algorythem:1)]   [(nonethless:1)(nonetheless:1)]   [(less:1)]   [(because:1)]   [(down:1)(non:1)]   [(the:2)] the  [(less:1)(algorithm:1)]   [(would:3)] would  [(take:3)] take  [(a:3)] a  [(long:3)] long  [(time:3)] time  [(nonetheless:1)]   [(we:6)] we  [(can:5)] can  [(could:1)]   [(use:6)] use  [(this:6)] this  [(is:1)]   [(as:5)] as  [(a:1)]   [(a:7)] a  [(tool:7)] tool  [(to:1)]   [(depends:1)(anaylis:1)]   [(on:1)]   [(any:3)] any  [(algorythem:1)]   [(algorithm:2)] algorithm  [(can:2)] can  [(be:2)] be  [(transformed:3)] transformed  [(in:2)] in  [(this:2)] this  [(way:2)] way  [(to:1)]   [(into:3)] into  [(a:3)] a  [(decision:3)] decision  [(tree:2)] tree  [(and:5)] and  [(now:5)] now  [(we:4)] we  [(have:4)] have  [(this:4)] this  [(observation:2)(obvertaiont:1)] observation  [(depends:1)]   [(on:1)]   [(exponentially:1)]   [(we:1)]   [(have:1)]   [(all:1)]   [(of:1)]   [(these:1)]   [(any:1)]   [(algorithm:1)]   [(can:1)]   [(be:1)]   [(confirmed:1)]  

 [(sort:1)]   [(every:5)] every  [(possible:7)] possible  [(list:6)] list  [(of:6)] of  [(length:4)] length  [(at:4)] at  [(the:4)] the  [(least:2)(leaves:2)] least  [(i:4)] i  [(have:4)] have  [(to:4)] to  [(have:4)] have  [(all:4)] all  [(the:4)] the  [(possible:1)]   [(so:1)(size:1)]   [(has:1)]   [(to:1)]   [(be:1)]   [(able:1)]   [(to:1)]   [(so:1)]   [(that:4)] that  [(is:4)] is  [(theres:2)] theres  [(a:6)] a  [(lot:6)] lot  [(of:4)] of  [(theres:1)]   [(a:1)]   [(lot:1)]   [(of:1)]   [(permutations:8)(permuations:1)] permutations  [(on:3)] on  [(elemenst:1)(elements:3)] elements  [(there:1)]   [(of:5)] of  [(those:2)] those  [(is:1)(elements:1)]   [(factorial:5)] factorial  [(them:1)]   [(so:3)] so  [(it:1)]   [(all:1)]   [(the:1)]   [(factorial:1)]   [(is:4)] is  [(exponential:3)] exponential  [(it:2)] it  [(is:1)]   [(really:4)] really  [(big:4)] big  [(so:1)]   [(this:7)] this  [(tree:7)] tree  [(is:8)] is  [(huge:6)] huge  [(that:6)] that  [(is:6)] is  [(why:6)] why  [(we:6)] we  [(do:5)] do  [(not:5)] not  [(write:3)] write  [(rnite:1)(right:1)]   [(algorythems:1)(algorithms:3)(algoirthms:1)] algorithms  [(down:4)] down  [(as:3)] as  [(a:3)] a  [(decision:2)(descision:1)] decision  [(tree:2)] tree  [(going:3)] going  [(to:3)] to  [(be:3)] be  [(huge:2)] huge  [(don:1)(even:1)]   [(exponential:1)(though:1)]   [(in:3)] in  [(exponetion:1)]   [(some:2)] some  [(cases:1)(case:1)]   [(maybe:1)]   [(we:2)] we  [(could:2)] could  [(the:1)]   [(input:1)(decisions:1)]   [(trees:1)(size:1)]   [(it:4)] it  [(is:4)] is  [(not:4)] not  [(a:3)] a  [(very:4)] very  [(good:1)(very:1)]   [(compact:3)] compact  [(representation:3)] representation  [(it:1)(if:1)]   [(is:1)]   [(going:1)(a:1)]   [(to:1)(very:1)]   [(succint:1)(be:1)]   [(represenation:1)]   [(of:1)]   [(this:1)]   [(which:1)]   [(is:1)]   [(they:3)] they  [(have:3)] have  [(constant:4)] constant  [(length:3)] length  [(lang:1)]   [(these:1)]   [(algorithms:1)]   [(you:2)] you  [(write:2)] write  [(them:1)(this:1)]   [(down:2)] down  [(in:2)] in  [(pseudocode:2)] pseudocode  [(here:5)] here  [(the:5)] the  [(length:6)] length  [(it:1)]   [(depends:5)] depends  [(on:6)] on  [(and:4)] and  [(it:3)] it  [(depends:4)] depends  [(exponentially:4)(exponential:1)] exponentially  [(on:5)] on  [(but:2)] but  [(writing:2)(writting:1)] writing  [(dwon:1)(none:1)]   [(of:1)(down:2)] down  [(these:1)]   [(algorithms:1)]   [(you:1)]   [(know:1)]   [(you:1)]   [(write:1)]   [(them:1)]   [(down:1)]   [(in:1)]   [(pseudocode:1)]   [(they:1)]   [(have:1)]   [(constant:1)]   [(length:1)]   [(not:3)] not  [(useful:3)] useful  [(if:3)] if  [(you:3)] you  [(want:1)(wanted:2)] wanted  [(to:3)] to  [(implement:3)] implement  [(the:8)] the  [(algorithm:5)] algorithm  [(algorythem:1)]   [(nonethless:1)(nonetheless:1)]   [(less:1)]   [(because:1)]   [(down:1)(non:1)]   [(the:2)] the  [(less:1)(algorithm:1)]   [(would:3)] would  [(take:3)] take  [(a:3)] a  [(long:3)] long  [(time:3)] time  [(nonetheless:1)]   [(we:6)] we  [(can:5)] can  [(could:1)]   [(use:6)] use  [(this:6)] this  [(is:1)]   [(as:5)] as  [(a:1)]   [(a:7)] a  [(tool:7)] tool  [(to:1)]   [(depends:1)(anaylis:1)]   [(on:1)]   [(any:3)] any  [(algorythem:1)]   [(algorithm:2)] algorithm  [(can:2)] can  [(be:2)] be  [(transformed:3)] transformed  [(in:2)] in  [(this:2)] this  [(way:2)] way  [(to:1)]   [(into:3)] into  [(a:3)] a  [(decision:3)] decision  [(tree:2)] tree  [(and:5)] and  [(now:5)] now  [(we:4)] we  [(have:4)] have  [(this:4)] this  [(observation:2)(obvertaiont:1)] observation  [(depends:1)]   [(on:1)]   [(exponentially:1)]   [(we:1)]   [(have:1)]   [(all:1)]   [(of:1)]   [(these:1)]   [(any:1)]   [(algorithm:1)]   [(can:1)]   [(be:1)]   [(confirmed:1)]  
65
we(240171)have(240531)this(240971)observation(241644)that(243522)the(244588)of(245973)leaves(247203)in(248323)this(248514)decision(249058)tree(250162)has(250757)to(251252)be(251506)realy(251882)big(255691)before(257761)we(258417)get(258729)to(259916)leaves(260273)lets(262122)talk(262888)about(264457)the(264930)depth(265329)of(266008)this(266280)tree(267281)this(268160)decision(268680)tree(269704)represents(270408)all(273287)possible(273528)the(275346)running(275887)time(277616)or(278295)the(278527)number(279144)of(279913)comparisons(280240)made(281583)by(282266)that(282558)is(284518)just(285281)the(285735)length(286648)of(287470)the(287750)path(288181)and(289734)thereforte(290041)the(292011)case(293701)running(294245)time(295158)over(295805)all(296806)possible(297302)inputs(298295)of(299150)
83
in(240042)this(240242)way(240794)into(241170)a(241577)decision(242161)and(243753)now(244237)we(244636)have(244961)this(245290)observation(245938)that(247185)the(247610)number(248107)fleaves(248890)in(249929)deciesion(250561)tree(251833)has(253537)to(253833)bee(254089)really(255449)big(255962)before(256849)we(257435)get(257705)to(258057)leaves(258329)lets(259089)talk(259953)about(260385)the(260777)depth(261105)of(261745)the(261993)tree(262993)so(264721)this(265753)decision(266441)tree(267321)represents(267881)all(269105)possible(269945)executions(270825)of(272313)algortithm(272889)if(275729)i(275985)look(276897)at(277417)a(277841)particular(278136)execution(279201)the(280739)running(281193)time(281897)of(282321)that(282546)execution(283145)is(284386)just(284801)the(285249)length(285569)of(286234)the(286489)path(286824)and(287522)therefore(287848)the(288657)worst(289016)case(289696)running(290146)time(292008)over(292434)all(292888)possible(293273)of(294736)length(295128)is(296529)going(296800)to(297328)be(297600)
55
any(240042)alogorithm(240850)can(243634)be(244394)the(245906)number(246474)of(247722)leaves(248090)in(249634)this(251419)decision(253466)tree(255186)have(255957)to(256610)be(257026)really(257594)big(258634)lets(259938)talk(261474)about(263305)the(264095)depth(264826)of(265922)the(266352)tree(267522)this(268817)decision(270409)tree(271674)represents(272433)all(274520)the(275105)possible(275562)the(278057)running(278649)time(279673)or(280265)the(280689)number(281289)of(282313)comparisons(282873)made(286409)by(287273)that(287745)is(290441)just(291161)the(292049)length(292513)of(293698)the(294098)path(294603)and(295377)therefore(296081)the(297665)worst(298505)case(299729)
75
observation(240264)that(241936)the(242336)number(242648)of(243472)leaves(243736)in(244488)decision(245264)tree(246447)has(246951)to(247247)be(247423)really(247624)big(248551)let(249815)me(250096)talk(250584)about(251000)leaves(251480)in(252112)a(252328)second(252496)before(258224)we(258992)get(259240)to(259600)leaves(259840)lets(260904)talk(262208)about(262632)the(263192)depth(263624)of(264327)the(264615)tree(264967)this(267031)decision(268656)tree(269560)represents(270064)all(271200)possible(272072)the(274456)running(274768)time(275640)or(276032)the(276336)numbero(276624)of(279360)comparison(279704)made(281623)by(283424)that(283775)is(286360)just(286656)the(287144)the(287144)length(287448)of(288081)the(288360)path(288712)therefore(289152)the(290016)worst(290304)case(290936)running(291328)time(292168)over(292616)all(293080)possible(294496)inputs(295457)length(296249)is(297129)going(298065)to(298625)be(298897)
54
the(242468)number(243064)of(244105)leaves(244473)in(245505)this(246345)descision(247032)tree(249577)has(250521)to(251017)be(251488)really(251985)vbe(253129)let(254545)me(255369)talk(255680)about(256473)leaves(257538)in(258449)a(258745)seconde(259138)before(260766)we(261841)get(262394)to(263050)number(264137)of(265238)leaves(265561)lest(266817)if(269217)i(269937)look(270568)a(271300)a(273316)particular(273866)excecution(275682)the(279386)length(279874)of(281114)the(281453)path(282065)and(285753)therefore(286225)the(287867)worse(288367)case(289716)running(290713)time(291898)of(294234)length(294682)is(296730)going(297298)to(297869)be(298434)
56
that(241641)the(242054)number(243526)of(244725)leaves(245058)in(246003)this(246313)decision(246924)tree(248002)has(248966)to(249360)be(249622)really(250039)big(250932)before(255123)we(255991)get(256704)to(257137)leaves(257493)lets(258860)talk(259759)about(260254)the(260732)depth(261172)of(262079)the(262375)3(262719)thid(265248)decision(267375)tree(269367)represents(270328)the(274391)running(274632)time(275495)or(276064)the(276396)number(276730)of(277519)comparisons(278178)and(285985)therefore(288272)the(289322)worst(289776)case(290540)running(291102)time(292022)of(292705)all(293033)possible(293499)inputs(295106)of(296211)length(296506)is(298458)going(298775)to(299335)be(299566)
47
that(242827)the(243282)of(244983)leaves(245324)in(245988)this(246263)decision(247397)tree(249405)have(249843)to(250425)be(250661)really(251013)big(251566)before(255142)we(255710)get(255977)to(256738)leaves(257534)so(263929)this(264954)decision(265487)tree(266885)represents(270666)all(271280)the(271695)some(272782)root(273269)to(273969)leaf(274492)path(275239)the(276326)number(276608)of(278053)comparisons(278337)and(286730)therefore(287045)the(288289)worst(288641)case(289292)running(290207)time(291976)of(293724)length(294001)is(295627)going(296557)to(297417)be(297675)
59
a(240370)decision(240654)tree(242084)has(243337)to(243819)be(244113)really(244494)big(245426)so(246564)let(248853)me(249314)talk(250016)about(250543)leaves(251035)in(251838)a(252096)second(252350)before(254774)we(257121)get(257566)to(258005)leaves(258206)lets(259088)talk(260294)about(261143)the(261607)depth(262105)of(263005)the(263244)tree(263923)so(264666)this(265789)decions(266356)tree(268365)corosponds(270918)some(273320)roots(273864)to(275097)leave(275365)paths(276454)that(278306)exicution(278839)lenght(282224)of(283121)that(283377)path(283923)therefore(286688)the(288345)worst(288684)case(289560)running(290204)time(291930)imputs(292934)of(293984)length(294910)is(296874)going(297197)to(297757)be(298055)
70
that(240998)the(241388)number(241688)of(242508)leaves(242848)in(243608)this(243838)decision(244428)tree(246598)has(247208)to(247598)be(247838)very(248568)big(249048)let(250578)me(251028)talk(251378)about(253788)leaves(254228)a(255558)second(255868)before(257288)we(258088)get(258368)to(258788)leaves(259088)lets(260038)talk(260688)about(261188)the(261648)depth(262018)the(263248)tree(263578)so(264698)this(265418)decision(266798)tree(267708)depends(268328)on(269198)all(269898)possible(270338)of(272728)the(272988)algorithm(273288)the(275108)running(275588)time(276518)of(276888)th(277968)enumber(278168)of(279778)executions(280728)made(282208)by(282988)and(285968)therefore(286548)the(288058)worst(288588)case(289608)running(290148)time(291018)over(291828)all(292328)possible(292798)of(295228)length(295488)is(297208)going(297568)to(298048)be(298298)
61
into(240053)a(240747)decision(240985)tree(242201)and(242980)the(243418)number(243945)of(244753)trees(245369)in(246169)this(246465)decision(247602)tree(249351)has(250201)to(250625)be(251434)really(251905)let(253364)me(253749)talk(254385)about(254930)leaves(256444)in(257870)a(258220)second(258404)first(259848)lets(260653)talk(261796)about(262409)depth(263561)of(264453)the(264797)tree(266294)this(267097)decision(267884)tree(268913)represents(269706)all(272427)possible(273236)the(274885)running(275402)time(276434)the(279114)length(279511)of(281399)the(281753)path(282154)and(285779)therefore(286259)the(287517)worst(287884)case(289382)running(290137)time(292600)over(293098)all(294018)possible(294635)of(297098)length(297443)is(299396)going(299763)
...................................................................................................................................................Number of Queue Removal: 147

Time spent in alignment:1302 ms
Same Count = 0
Closed list size = 0
_		_		_		_		_		_		_		_		_		_		we		have		this		observation		that		_		_		the		_		of		leaves		_		in		this		decision		tree		_		has		to		_		be		_		realy		_		big		_		_		_		_		_		_		_		_		_		_		before		we		get		to		leaves		lets		talk		about		the		depth		of		_		this		tree		_		this		_		_		_		decision		tree		represents		all		possible		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		running		time		or		the		number		of		comparisons		made		by		that		_		is		just		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		length		_		of		_		the		path		and		_		_		_		_		_		thereforte		the		_		_		case		running		time		_		over		_		all		possible		inputs		of		_		_		_		_		_		
_		in		this		way		into		a		decision		_		and		now		we		have		this		observation		that		_		_		the		number		_		fleaves		_		in		_		deciesion		tree		_		has		to		bee		_		_		really		_		big		_		_		_		_		_		_		_		_		_		_		before		we		get		to		leaves		lets		talk		about		the		depth		of		the		_		tree		so		this		_		_		_		decision		tree		represents		all		possible		executions		of		algortithm		_		_		_		_		_		_		_		if		i		look		at		a		particular		execution		the		running		time		_		_		_		of		_		_		_		that		execution		is		just		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		length		_		of		_		the		path		and		_		_		_		_		_		therefore		the		worst		_		case		running		time		_		over		_		all		possible		_		of		length		is		going		to		be		
_		_		any		alogorithm		_		_		_		_		_		_		_		_		_		_		_		can		be		the		number		of		leaves		_		in		this		decision		tree		have		_		to		_		be		_		really		_		big		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		lets		talk		about		the		depth		of		the		_		tree		_		this		_		_		_		decision		tree		represents		all		_		_		_		_		_		_		the		possible		_		_		_		_		_		_		_		_		_		_		the		running		time		or		the		number		of		comparisons		made		by		that		_		is		just		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		length		_		of		_		the		path		and		_		_		_		_		_		therefore		the		worst		_		case		_		_		_		_		_		_		_		_		_		_		_		_		_		_		
observation		_		_		_		_		_		_		_		_		_		_		_		_		_		that		_		_		the		number		of		leaves		_		in		_		decision		tree		_		has		to		_		be		_		really		_		big		_		let		me		talk		about		leaves		in		a		second		_		before		we		get		to		leaves		lets		talk		about		the		depth		of		the		_		tree		_		this		_		_		_		decision		tree		represents		all		possible		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		running		time		or		the		numbero		of		comparison		made		by		that		_		is		just		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		length		_		of		_		the		path		_		_		_		_		_		_		therefore		the		worst		_		case		running		time		_		over		_		all		possible		inputs		_		length		is		going		to		be		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		number		of		leaves		_		in		this		descision		tree		_		has		to		_		be		_		really		vbe		_		_		let		me		talk		about		leaves		in		a		seconde		_		before		we		get		to		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		number		of		_		_		_		_		_		_		_		_		_		_		_		leaves		lest		_		_		if		i		look		a		a		particular		excecution		the		length		_		of		_		the		path		and		_		_		_		_		_		therefore		the		_		worse		case		running		time		_		_		_		_		_		_		of		length		is		going		to		be		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		that		_		_		the		number		of		leaves		_		in		this		decision		tree		_		has		to		_		be		_		really		_		big		_		_		_		_		_		_		_		_		_		_		before		we		get		to		leaves		lets		talk		about		the		depth		of		the		_		_		_		_		_		3		thid		decision		tree		represents		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		running		time		or		the		number		of		comparisons		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		and		_		_		_		_		_		therefore		the		worst		_		case		running		time		_		_		of		all		possible		inputs		of		length		is		going		to		be		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		that		_		_		the		_		of		leaves		_		in		this		decision		tree		have		_		to		_		be		_		really		_		big		_		_		_		_		_		_		_		_		_		_		before		we		get		to		leaves		_		_		_		_		_		_		_		_		_		so		this		_		_		_		decision		tree		represents		all		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		_		_		_		_		_		_		_		_		_		_		_		_		_		_		some		root		to		_		leaf		path		_		_		_		_		_		_		_		_		the		_		number		of		comparisons		_		_		and		_		_		_		_		_		therefore		the		worst		_		case		running		time		_		_		_		_		_		_		of		length		is		going		to		be		
_		_		_		_		_		a		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		decision		tree		_		has		to		_		be		_		really		_		big		so		let		me		talk		about		leaves		in		a		second		_		before		we		get		to		leaves		lets		talk		about		the		depth		of		the		_		tree		so		this		decions		_		_		_		tree		_		_		_		_		corosponds		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		some		roots		to		leave		_		paths		that		exicution		lenght		_		_		_		_		_		_		_		_		of		_		_		_		_		that		path		_		_		_		therefore		the		worst		_		case		running		time		imputs		_		_		_		_		_		of		length		is		going		to		be		
_		_		_		_		_		_		_		_		_		_		_		_		_		_		that		_		_		the		number		of		leaves		_		in		this		decision		tree		_		has		to		_		be		very		_		_		big		_		let		me		talk		about		leaves		_		a		second		_		before		we		get		to		leaves		lets		talk		about		the		depth		_		the		_		tree		so		this		_		_		_		decision		tree		_		_		_		_		_		_		depends		on		all		possible		of		the		algorithm		_		_		_		_		_		_		_		the		running		time		_		_		_		of		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		th		enumber		_		_		_		_		_		of		_		_		_		_		_		executions		made		by		and		therefore		the		worst		_		case		running		time		_		over		_		all		possible		_		of		length		is		going		to		be		
_		_		_		_		into		a		decision		tree		and		_		_		_		_		_		_		_		_		the		number		of		_		trees		in		this		decision		tree		_		has		to		_		be		_		really		_		_		_		let		me		talk		about		leaves		in		a		second		first		_		_		_		_		_		lets		talk		about		_		depth		of		the		_		tree		_		this		_		_		_		decision		tree		represents		all		possible		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		running		time		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		_		the		length		_		of		_		the		path		and		_		_		_		_		_		therefore		the		worst		_		case		running		time		_		over		_		all		possible		_		of		length		is		going		_		_		

observation in any alogorithm into a decision tree and now we have this observation that can be the number of leaves trees in this decision tree have has to bee be very really vbe big so let me talk about leaves in a second first before we get to leaves lets talk about the depth of the this tree so this decions 3 thid decision tree represents all possible executions of algortithm depends on the possible of the algorithm if i look at a particular execution the running time or the number of comparisons made by that execution is just the some root to leave leaf paths that if lenght look a a particular excecution the length number of comparisons the path and that executions made by and therefore the worst worse case running time imputs over of all possible inputs of length is going to be 

observation in any alogorithm into a decision tree and now we have this observation that can be the number of leaves trees in this decision tree have has to bee be very really vbe big so let me talk about leaves in a second first before we get to leaves lets talk about the depth of the this tree so this decions 3 thid decision tree represents all possible executions of algortithm depends on the possible of the algorithm if i look at a particular execution the running time or the number of comparisons made by that execution is just the some root to leave leaf paths that if lenght look a a particular excecution the length number of comparisons the path and that executions made by and therefore the worst worse case running time imputs over of all possible inputs of length is going to be 

 [(observation:1)]   [(in:1)]   [(any:1)(this:1)]   [(alogorithm:1)(way:1)]   [(into:2)] into  [(a:3)] a  [(decision:2)] decision  [(tree:1)]   [(and:2)] and  [(now:1)]   [(we:2)] we  [(have:2)] have  [(this:2)] this  [(observation:2)] observation  [(that:6)] that  [(can:1)]   [(be:1)]   [(the:9)] the  [(number:7)] number  [(of:8)] of  [(fleaves:1)(leaves:7)] leaves  [(trees:1)]   [(in:9)] in  [(this:7)] this  [(deciesion:1)(decision:8)(descision:1)] decision  [(tree:10)] tree  [(have:2)] have  [(has:8)] has  [(to:10)] to  [(bee:1)]   [(be:9)] be  [(very:1)]   [(realy:1)(really:8)] really  [(vbe:1)]   [(big:8)] big  [(so:1)]   [(let:5)] let  [(me:5)] me  [(talk:5)] talk  [(about:5)] about  [(leaves:5)] leaves  [(in:4)] in  [(a:5)] a  [(second:4)(seconde:1)] second  [(first:1)]   [(before:8)] before  [(we:8)] we  [(get:8)] get  [(to:8)] to  [(leaves:7)] leaves  [(lets:8)] lets  [(talk:8)] talk  [(about:8)] about  [(the:7)] the  [(depth:8)] depth  [(of:7)] of  [(the:7)] the  [(this:1)]   [(tree:7)] tree  [(so:4)] so  [(this:8)] this  [(decions:1)]   [(3:1)]   [(thid:1)]   [(decision:8)] decision  [(tree:9)] tree  [(represents:7)] represents  [(all:6)] all  [(possible:4)] possible  [(executions:1)]   [(of:1)(corosponds:1)]   [(algortithm:1)]   [(depends:1)]   [(on:1)]   [(the:1)(all:1)]   [(possible:2)] possible  [(of:1)]   [(the:1)]   [(algorithm:1)]   [(if:1)]   [(i:1)]   [(look:1)]   [(at:1)]   [(a:1)]   [(particular:1)]   [(execution:1)]   [(the:8)] the  [(running:7)] running  [(time:7)] time  [(or:4)] or  [(the:4)] the  [(numbero:1)(number:4)] number  [(of:7)] of  [(comparisons:3)(comparison:1)] comparisons  [(made:3)] made  [(by:3)] by  [(that:4)] that  [(execution:1)]   [(is:4)] is  [(just:4)] just  [(the:1)]   [(some:2)] some  [(root:1)(roots:1)]   [(to:2)] to  [(leave:1)(leaves:1)]   [(leaf:1)(lest:1)]   [(paths:1)(path:1)]   [(that:1)]   [(if:1)(exicution:1)]   [(lenght:1)(i:1)]   [(look:1)]   [(a:1)(th:1)]   [(a:1)(enumber:1)]   [(particular:1)]   [(excecution:1)]   [(the:7)] the  [(length:6)] length  [(number:1)]   [(of:9)] of  [(comparisons:1)]   [(the:6)] the  [(path:6)] path  [(and:7)] and  [(that:1)]   [(executions:1)(path:1)]   [(made:1)]   [(by:1)]   [(and:1)]   [(therefore:9)(thereforte:1)] therefore  [(the:10)] the  [(worst:8)] worst  [(worse:1)]   [(case:10)] case  [(running:9)] running  [(time:9)] time  [(imputs:1)]   [(over:5)] over  [(of:1)]   [(all:6)] all  [(possible:6)] possible  [(inputs:3)] inputs  [(of:8)] of  [(length:8)] length  [(is:8)] is  [(going:8)] going  [(to:7)] to  [(be:7)] be 

 [(observation:1)]   [(in:1)]   [(any:1)(this:1)]   [(alogorithm:1)(way:1)]   [(into:2)] into  [(a:3)] a  [(decision:2)] decision  [(tree:1)]   [(and:2)] and  [(now:1)]   [(we:2)] we  [(have:2)] have  [(this:2)] this  [(observation:2)] observation  [(that:6)] that  [(can:1)]   [(be:1)]   [(the:9)] the  [(number:7)] number  [(of:8)] of  [(fleaves:1)(leaves:7)] leaves  [(trees:1)]   [(in:9)] in  [(this:7)] this  [(deciesion:1)(decision:8)(descision:1)] decision  [(tree:10)] tree  [(have:2)] have  [(has:8)] has  [(to:10)] to  [(bee:1)]   [(be:9)] be  [(very:1)]   [(realy:1)(really:8)] really  [(vbe:1)]   [(big:8)] big  [(so:1)]   [(let:5)] let  [(me:5)] me  [(talk:5)] talk  [(about:5)] about  [(leaves:5)] leaves  [(in:4)] in  [(a:5)] a  [(second:4)(seconde:1)] second  [(first:1)]   [(before:8)] before  [(we:8)] we  [(get:8)] get  [(to:8)] to  [(leaves:7)] leaves  [(lets:8)] lets  [(talk:8)] talk  [(about:8)] about  [(the:7)] the  [(depth:8)] depth  [(of:7)] of  [(the:7)] the  [(this:1)]   [(tree:7)] tree  [(so:4)] so  [(this:8)] this  [(decions:1)]   [(3:1)]   [(thid:1)]   [(decision:8)] decision  [(tree:9)] tree  [(represents:7)] represents  [(all:6)] all  [(possible:4)] possible  [(executions:1)]   [(of:1)(corosponds:1)]   [(algortithm:1)]   [(depends:1)]   [(on:1)]   [(the:1)(all:1)]   [(possible:2)] possible  [(of:1)]   [(the:1)]   [(algorithm:1)]   [(if:1)]   [(i:1)]   [(look:1)]   [(at:1)]   [(a:1)]   [(particular:1)]   [(execution:1)]   [(the:8)] the  [(running:7)] running  [(time:7)] time  [(or:4)] or  [(the:4)] the  [(numbero:1)(number:4)] number  [(of:7)] of  [(comparisons:3)(comparison:1)] comparisons  [(made:3)] made  [(by:3)] by  [(that:4)] that  [(execution:1)]   [(is:4)] is  [(just:4)] just  [(the:1)]   [(some:2)] some  [(root:1)(roots:1)]   [(to:2)] to  [(leave:1)(leaves:1)]   [(leaf:1)(lest:1)]   [(paths:1)(path:1)]   [(that:1)]   [(if:1)(exicution:1)]   [(lenght:1)(i:1)]   [(look:1)]   [(a:1)(th:1)]   [(a:1)(enumber:1)]   [(particular:1)]   [(excecution:1)]   [(the:7)] the  [(length:6)] length  [(number:1)]   [(of:9)] of  [(comparisons:1)]   [(the:6)] the  [(path:6)] path  [(and:7)] and  [(that:1)]   [(executions:1)(path:1)]   [(made:1)]   [(by:1)]   [(and:1)]   [(therefore:9)(thereforte:1)] therefore  [(the:10)] the  [(worst:8)] worst  [(worse:1)]   [(case:10)] case  [(running:9)] running  [(time:9)] time  [(imputs:1)]   [(over:5)] over  [(of:1)]   [(all:6)] all  [(possible:6)] possible  [(inputs:3)] inputs  [(of:8)] of  [(length:8)] length  [(is:8)] is  [(going:8)] going  [(to:7)] to  [(be:7)] be 

 [(observation:1)]   [(in:1)]   [(any:1)(this:1)]   [(alogorithm:1)(way:1)]   [(into:2)] into  [(a:3)] a  [(decision:2)] decision  [(tree:1)]   [(and:2)] and  [(now:1)]   [(we:2)] we  [(have:2)] have  [(this:2)] this  [(observation:2)] observation  [(that:6)] that  [(can:1)]   [(be:1)]   [(the:9)] the  [(number:7)] number  [(of:8)] of  [(fleaves:1)(leaves:7)] leaves  [(trees:1)]   [(in:9)] in  [(this:7)] this  [(deciesion:1)(decision:8)(descision:1)] decision  [(tree:10)] tree  [(have:2)] have  [(has:8)] has  [(to:10)] to  [(bee:1)]   [(be:9)] be  [(very:1)]   [(realy:1)(really:8)] really  [(vbe:1)]   [(big:8)] big  [(so:1)]   [(let:5)] let  [(me:5)] me  [(talk:5)] talk  [(about:5)] about  [(leaves:5)] leaves  [(in:4)] in  [(a:5)] a  [(second:4)(seconde:1)] second  [(first:1)]   [(before:8)] before  [(we:8)] we  [(get:8)] get  [(to:8)] to  [(leaves:7)] leaves  [(lets:8)] lets  [(talk:8)] talk  [(about:8)] about  [(the:7)] the  [(depth:8)] depth  [(of:7)] of  [(the:7)] the  [(this:1)]   [(tree:7)] tree  [(so:4)] so  [(this:8)] this  [(decions:1)]   [(3:1)]   [(thid:1)]   [(decision:8)] decision  [(tree:9)] tree  [(represents:7)] represents  [(all:6)] all  [(possible:4)] possible  [(executions:1)]   [(of:1)(corosponds:1)]   [(algortithm:1)]   [(depends:1)]   [(on:1)]   [(the:1)(all:1)]   [(possible:2)] possible  [(of:1)]   [(the:1)]   [(algorithm:1)]   [(if:1)]   [(i:1)]   [(look:1)]   [(at:1)]   [(a:1)]   [(particular:1)]   [(execution:1)]   [(the:8)] the  [(running:7)] running  [(time:7)] time  [(or:4)] or  [(the:4)] the  [(numbero:1)(number:4)] number  [(of:7)] of  [(comparisons:3)(comparison:1)] comparisons  [(made:3)] made  [(by:3)] by  [(that:4)] that  [(execution:1)]   [(is:4)] is  [(just:4)] just  [(the:1)]   [(some:2)] some  [(root:1)(roots:1)]   [(to:2)] to  [(leave:1)(leaves:1)]   [(leaf:1)(lest:1)]   [(paths:1)(path:1)]   [(that:1)]   [(if:1)(exicution:1)]   [(lenght:1)(i:1)]   [(look:1)]   [(a:1)(th:1)]   [(a:1)(enumber:1)]   [(particular:1)]   [(excecution:1)]   [(the:7)] the  [(length:6)] length  [(number:1)]   [(of:9)] of  [(comparisons:1)]   [(the:6)] the  [(path:6)] path  [(and:7)] and  [(that:1)]   [(executions:1)(path:1)]   [(made:1)]   [(by:1)]   [(and:1)]   [(therefore:9)(thereforte:1)] therefore  [(the:10)] the  [(worst:8)] worst  [(worse:1)]   [(case:10)] case  [(running:9)] running  [(time:9)] time  [(imputs:1)]   [(over:5)] over  [(of:1)]   [(all:6)] all  [(possible:6)] possible  [(inputs:3)] inputs  [(of:8)] of  [(length:8)] length  [(is:8)] is  [(going:8)] going  [(to:7)] to  [(be:7)] be 
3
length(300358)is(301492)to(302460)
()
2
runnign(300560)time(301808)
()
()
()
()
()
()
2
to(300546)be(300851)
....Number of Queue Removal: 4

Time spent in alignment:2 ms
Same Count = 0
Closed list size = 0
length		is		to		_		
_		_		_		_		
_		runnign		time		_		
_		_		_		_		
_		_		_		_		
_		_		_		_		
_		_		_		_		
_		_		_		_		
_		_		_		_		
_		_		to		be		

length is to be 

length is to be 

 [(length:1)]   [(is:1)(runnign:1)]   [(to:2)(time:1)] to  [(be:1)]  

 [(length:1)]   [(is:1)(runnign:1)]   [(to:2)(time:1)] to  [(be:1)]  

 [(length:1)]   [(is:1)(runnign:1)]   [(to:2)(time:1)] to  [(be:1)]  


---------------------------------
Output without threshold:
even if eve in you even had have a decision free tree computer whatever that is okay but lets prive it okay let us prove this theorem theory that decision trees somehow model compare in some model decison comparision sorting algorithms which we call just comparison sorts so thi sis this is a transformation and we are going to build go 1 tree for each value of so mention that the algorythim decision trees depend on so the algorithm we will it depends on but it works for on all values of and we are just going to as think of the algorithm as a splitting into 2 forks the left whenever it makes a comparision subtree sub tree right subtree whenever into forks the left subtree and the right subtree whenever it makes a comparison sub tree whwenver it makes a if you we take a comparison sort like a merge sort mergesort and it does lots of stuff but at some point it does index okay theres a arithmetic of does makes a comparison okay there are 2 halves halfs of recursion whatever and it is what the algorithm theres what the algorithm and what it would do if the comparison came out less it is greater than or equal to so we are theres so came out less than or greater than you can build a tree in 1 sense this way so in some sense sow what this tree is doing is it is listing aall all the computer would do if came out greater than tree or algorithm is doing is considering what would happen for all possible values executions of this algorithm comparisons those comparisons algorithm so we will call these all possible construciton instruction insturciton traces so you write down all of the instructions that are executed by this algorithm for all possible input arrays see how they could come and what all of the comparisions algorithm does and can come argyrythnm in does these instructions so we see all the end comparisons in the end you will get a this tree now so how big will that tree be roughly as a fun ction function of yeah it has to sort any possible list it will have good right if tis permuations if it is got to gotta be able to sort every gonna have list source sort every possible list of length at the least i have to have all the possible so has to be able to so that is theres a lot of theres a lot of permutations on elements there of those is factorial them so it all the factorial is exponential it is really big so this tree is huge that is why we do not write rnite algorithms down as a decision tree going to be huge don exponential in exponetion some cases maybe we could the input trees it is not a very good compact representation it is going to succint represenation of this which is they have constant length lang these algorithms you write them down in pseudocode here the length it depends on and it depends exponentially on but writing dwon down these algorithms you know you write them down in pseudocode they have constant length not useful if you wanted to implement the algorithm algorythem nonethless less because down the less would take a long time nonetheless we can could use this is as a tool to depends on any algorythem algorithm can be transformed in this way to into a decision tree and now we have this observation depends on exponentially we have all of these any algorithm can be confirmed observation in any alogorithm into a decision tree and now we have this observation that can be the number of leaves trees in this decision tree have has to bee be very really vbe big so let me talk about leaves in a second first before we get to leaves lets talk about the depth of the this tree so this decions 3 thid decision tree represents all possible executions of algortithm depends on the possible of the algorithm if i look at a particular execution the running time or the number of comparisons made by that execution is just the some root to leave leaf paths that if lenght look a particular excecution the length number of comparisons the path and that executions made by and therefore the worst worse case running time imputs over of all possible inputs of length is going to be length is to be


---------------------------------
Output with threshold:
even if you had a decision tree computer whatever that is okay but lets prove this theorem that decision trees somehow model in some sorting algorithms which we call just comparison sorts so this is a transformation and we are going to build 1 tree for each value of so mention that the decision trees depend on the algorithm we will it depends on but it works for all values of and we are just going to think of the algorithm as splitting into 2 forks the left whenever it makes a subtree and the right subtree it makes a comparison if we take a comparison sort like merge sort mergesort and it does lots of stuff at some point it does index theres makes a comparison there are 2 halves of what the algorithm theres what the algorithm would do if the comparison came out less it greater than or equal to so out greater than you can build a tree in this way so in some sense what this tree is doing is it is listing all the out is doing considering what would happen for all possible values executions of this algorithm so we will call these all possible instruction traces so you write down all the instructions that are executed by this algorithm for all possible input arrays see how they could come what all the algorithm does in the end you will get a tree now how big will that tree be roughly as a function of yeah to sort any possible list good right if it is got to gotta be able to sort every possible list of length at the least i have to have all the that is theres a lot of permutations on elements of those factorial so is exponential it really big this tree is huge that is why we do not write algorithms down as a decision tree going to be huge in some we could it is not a very compact representation they have constant length you write down in pseudocode here the length depends on and it depends exponentially on but writing down not useful if you wanted to implement the algorithm the would take a long time we can use this as a tool any algorithm can be transformed in this way into a decision tree and now we have this observation into a decision and we have this observation that the number of leaves in this decision tree have has to be really big let me talk about leaves in a second before we get to leaves lets talk about the depth of the tree so this decision tree represents all possible the running time or the number of comparisons made by that is just some to the length of the path and therefore the worst case running time over all possible inputs of length is going to be to


---------------------------------
Output without threshold:
even if eve in you even had have a decision free tree computer whatever that is okay but lets prive it okay let us prove this theorem theory that decision trees somehow model compare in some model decison comparision sorting algorithms which we call just comparison sorts so thi sis this is a transformation and we are going to build go 1 tree for each value of so mention that the algorythim decision trees depend on so the algorithm we will it depends on but it works for on all values of and we are just going to as think of the algorithm as a splitting into 2 forks the left whenever it makes a comparision subtree sub tree right subtree whenever
* into forks the left subtree and the right subtree whenever it makes a comparison sub tree whwenver it makes a if you we take a comparison sort like a merge sort mergesort and it does lots of stuff but at some point it does index okay theres a arithmetic of does makes a comparison okay there are 2 halves halfs of recursion whatever and it is what the algorithm theres what the algorithm and what it would do if the comparison came out less it is greater than or equal to so we are theres so came out less than or greater than you can build a tree in 1 sense this way so in some sense sow what this tree is doing is it is listing aall all the computer would do if came out greater than tree or algorithm is doing is considering what would happen for all possible values executions of this algorithm comparisons those comparisons algorithm so we will call these all
* call these all possible construciton instruction insturciton traces so you write down all of the instructions that are executed by this algorithm for all possible input arrays see how they could come and what all of the comparisions algorithm does and can come argyrythnm in does these instructions so we see all the end comparisons in the end you will get a this tree now so how big will that tree be roughly as a fun ction function of yeah it has to sort any possible list it will have good right if tis permuations if it is got to gotta be able to sort every gonna have list source
* sort every possible list of length at the least i have to have all the possible so has to be able to so that is theres a lot of theres a lot of permutations on elements there of those is factorial them so it all the factorial is exponential it is really big so this tree is huge that is why we do not write rnite algorithms down as a decision tree going to be huge don exponential in exponetion some cases maybe we could the input trees it is not a very good compact representation it is going to succint represenation of this which is they have constant length lang these algorithms you write them down in pseudocode here the length it depends on and it depends exponentially on but writing dwon down these algorithms you know you write them down in pseudocode they have constant length not useful if you wanted to implement the algorithm algorythem nonethless less because down the less would take a long time nonetheless we can could use this is as a a tool to depends on any algorythem algorithm can be transformed in this way to into a decision tree and now we have this observation depends on exponentially we have all of these any algorithm can be confirmed
* observation in any alogorithm into a decision tree and now we have this observation that can be the number of leaves trees in this decision tree have has to bee be very really vbe big so let me talk about leaves in a second first before we get to leaves lets talk about the depth of the this tree so this decions 3 thid decision tree represents all possible executions of algortithm depends on the possible of the algorithm if i look at a particular execution the running time or the number of comparisons made by that execution is just the some root to leave leaf paths that if lenght look a a particular excecution the length number of comparisons the path and that executions made by and therefore the worst worse case running time imputs over of all possible inputs of length is going to be
* length is to be
* 


---------------------------------
Output with threshold:
even if you had a decision tree computer whatever that is okay but lets prove this theorem that decision trees somehow model in some sorting algorithms which we call just comparison sorts so this is a transformation and we are going to build 1 tree for each value of so mention that the decision trees depend on the algorithm we will it depends on but it works for all values of and we are just going to think of the algorithm as splitting into 2 forks the left whenever it makes a
* subtree and the right subtree it makes a comparison if we take a comparison sort like merge sort mergesort and it does lots of stuff at some point it does index theres makes a comparison there are 2 halves of what the algorithm theres what the algorithm would do if the comparison came out less it greater than or equal to so out greater than you can build a tree in this way so in some sense what this tree is doing is it is listing all the out is doing considering what would happen for all possible values executions of this algorithm so we will call these
* call these all possible instruction traces so you write down all the instructions that are executed by this algorithm for all possible input arrays see how they could come what all the algorithm does in the end you will get a tree now how big will that tree be roughly as a function of yeah to sort any possible list good right if it is got to gotta be able to sort every
* every possible list of length at the least i have to have all the that is theres a lot of permutations on elements of those factorial so is exponential it really big this tree is huge that is why we do not write algorithms down as a decision tree going to be huge in some we could it is not a very compact representation they have constant length you write down in pseudocode here the length depends on and it depends exponentially on but writing down not useful if you wanted to implement the algorithm the would take a long time we can use this as a tool any algorithm can be transformed in this way into a decision tree and now we have this observation
* into a decision and we have this observation that the number of leaves in this decision tree have has to be really big let me talk about leaves in a second before we get to leaves lets talk about the depth of the tree so this decision tree represents all possible possible the running time or the number of comparisons made by that is just some to the length of the path and therefore the worst case running time over all possible inputs of length is going to be
* to
* 
Ground Truth: -----------------
even if you had a decision tree computer whatever that is okay but lets prove this theorem that decision trees in some sense model comparison sorting algorithms which we call just comparison sorts so this is a transformation and we are going to build one tree for each value of n so mention that the the decision trees depend on n the algorithm hopefully does well it depends on n but it works for all values of n and were just going to think of the algorithm as splitting into two forks the left subtree and the right subtree whenever it makes a comparison if we take a comparison sort like merge sort and it does lots of stuff it does index arithmetic it does recursion whatever but at some point it makes a comparison and then we say okay there is two two halves of the algorithm theres what the algorithm would do if the comparison came out less than or equal to and what the algorithm would do if the comparison came out greater than so you can build a tree in this way so in some sense what this tree is doing is listing all possible executions of this algorithm considering what would happen for all possible values of those comparisons so we will call these all possible instruction traces so you write down all the instructions that are executed by this algorithm for all possible input input arrays a one to a n see what all the comparisons how they could come out and how what the algorithm does in the end you will get a tree now how big will that tree be roughly as a function of n yes good right if it has got to be able to sort every possible list of length n at the leaves i have to have all the permutations of those elements so that is a lot there is a lot of permutations on n elements there is n factorial of them n factorial is exponential its really big right so this tree is huge its going to be exponential in the input size n this that is why we do not write algorithms down normally as a decision tree even though in some cases maybe we could it is not very it is not a very compact representation these algorithms you know you write them down in pseudocode they have constant length it is a very succinct representation of this algorithm here the length depends on n and it depends exponentially on n which is not useful if you wanted to implement the algorithm so writing down the algorithm would take a long time okay but nonetheless we can use this as a tool to analyze these comparison sorting algorithms we have all these any algorithm can be transformed in this way into a decision tree and now we have this observation that the number of leaves in this decision tree has to be really big okay so let me talk about leaves in a in a second before we get to leaves lets talk about the depth of the tree so this decision tree represents all possible executions of the algorithm if i look at a particular execution which corresponds to some root to leaf path in the tree the running time or the number of comparisons made by that execution is just the length of the path and therefore the worst case running time over all possible inputs of length n is going to be

The graphical model output:
even if you had a decistion tree computer whatever that is okay but let prove this theorem that decision tree somehow in model some sense comparision which we call sorting algorithms just which we sorts call so this is a trasformation and we are going to build 1 tree for each value of the decision so mention that tree depend on the algorithm we will depends it works for all values of but decison trees depend on but and works we on are just going to think of the algorithm spliting as splittting going into to think 2 of forks the left subtree and the right subtree whenever it makes a comparision the subtree if we take a comparison sort like merge mergesort uh sort and it does lots of a stuff it at does some stuff point makes index a comparision it okay theres are 2 halves and of the algorithm theres what the algorithm would do if the comparisiton came out came greater out what less than it so or you equal can algorithm to build and a theres tree what would do in if some the this sense way out this tree so is doing is listing all possible greater executions of this algorithm what values the comparisons is for all so we will call these all possible instructino traces so you write down all the instructions that are executed by this algortihm for all possible input arrays see how they could come and what all the comparisons does in the algorithm end you will get a tree come now out how big will that tree be roughly as a function of yeah to any possible sort list good it if right if it is got to be gotta able to sort every possible list of length at the least i have to leaves have all so the that is permutations have theres a lot to have of permutations the on of all those elemenst factorial really is it big so this factorial tree is huge really exponential going that is big to be why in we do not is write that algoirthms huge it down is some cases not very could as compact a decisions representation very tree these algorithms they constant have you write them this down length in here pseudocode the length depends on and depends not the algorithm on and if it useful you depends wanted to implement exponentially on writing down the but algorithm would we less can take a tool use long this to anaylis as time nonethless any algorithm we can be use transformed tool in this into as a decision tree way any and now can we have be this observation that the number of leaves in this decision tree deciesion has to be really this big so let me have talk about leaves in a second before we get to leaves lets talk about the depth of the tree depth so of the this decision leave tree represents this decision all possible executions of some algortithm if tree i look a the root a particular to running the paths time excecution or the number of comparisons executions length of the made by of that execution is just the length of the path and therefore the worst path the thereforte case the running time over all of possible inputs of length is going to be

The final output with threshold:
even if you had a decision tree computer whatever that is okay but lets prove this theorem that decision trees somehow model in some sorting algorithms which we call just comparison sorts so this is a transformation and we are going to build 1 tree for each value of so mention that the decision trees depend on the algorithm we will it depends on but it works for all values of and we are just going to think of the algorithm as splitting into 2 forks the left whenever it makes a subtree and the right subtree it makes a comparison if we take a comparison sort like merge sort mergesort and it does lots of stuff at some point it does index theres makes a comparison there are 2 halves of what the algorithm theres what the algorithm would do if the comparison came out less it greater than or equal to so out greater than you can build a tree in this way so in some sense what this tree is doing is it is listing all the out is doing considering what would happen for all possible values executions of this algorithm so we will call these all possible instruction traces so you write down all the instructions that are executed by this algorithm for all possible input arrays see how they could come what all the algorithm does in the end you will get a tree now how big will that tree be roughly as a function of yeah to sort any possible list good right if it is got to gotta be able to sort every possible list of length at the least i have to have all the that is theres a lot of permutations on elements of those factorial so is exponential it really big this tree is huge that is why we do not write algorithms down as a decision tree going to be huge in some we could it is not a very compact representation they have constant length you write down in pseudocode here the length depends on and it depends exponentially on but writing down not useful if you wanted to implement the algorithm the would take a long time we can use this as a tool any algorithm can be transformed in this way into a decision tree and now we have this observation into a decision and we have this observation that the number of leaves in this decision tree have has to be really big let me talk about leaves in a second before we get to leaves lets talk about the depth of the tree so this decision tree represents all possible the running time or the number of comparisons made by that is just some to the length of the path and therefore the worst case running time over all possible inputs of length is going to be to

The final output without threshold:
even if eve in you even had have a decision free tree computer whatever that is okay but lets prive it okay let us prove this theorem theory that decision trees somehow model compare in some model decison comparision sorting algorithms which we call just comparison sorts so thi sis this is a transformation and we are going to build go 1 tree for each value of so mention that the algorythim decision trees depend on so the algorithm we will it depends on but it works for on all values of and we are just going to as think of the algorithm as a splitting into 2 forks the left whenever it makes a comparision subtree sub tree right subtree whenever into forks the left subtree and the right subtree whenever it makes a comparison sub tree whwenver it makes a if you we take a comparison sort like a merge sort mergesort and it does lots of stuff but at some point it does index okay theres a arithmetic of does makes a comparison okay there are 2 halves halfs of recursion whatever and it is what the algorithm theres what the algorithm and what it would do if the comparison came out less it is greater than or equal to so we are theres so came out less than or greater than you can build a tree in 1 sense this way so in some sense sow what this tree is doing is it is listing aall all the computer would do if came out greater than tree or algorithm is doing is considering what would happen for all possible values executions of this algorithm comparisons those comparisons algorithm so we will call these all possible construciton instruction insturciton traces so you write down all of the instructions that are executed by this algorithm for all possible input arrays see how they could come and what all of the comparisions algorithm does and can come argyrythnm in does these instructions so we see all the end comparisons in the end you will get a this tree now so how big will that tree be roughly as a fun ction function of yeah it has to sort any possible list it will have good right if tis permuations if it is got to gotta be able to sort every gonna have list source sort every possible list of length at the least i have to have all the possible so has to be able to so that is theres a lot of theres a lot of permutations on elements there of those is factorial them so it all the factorial is exponential it is really big so this tree is huge that is why we do not write rnite algorithms down as a decision tree going to be huge don exponential in exponetion some cases maybe we could the input trees it is not a very good compact representation it is going to succint represenation of this which is they have constant length lang these algorithms you write them down in pseudocode here the length it depends on and it depends exponentially on but writing dwon down these algorithms you know you write them down in pseudocode they have constant length not useful if you wanted to implement the algorithm algorythem nonethless less because down the less would take a long time nonetheless we can could use this is as a tool to depends on any algorythem algorithm can be transformed in this way to into a decision tree and now we have this observation depends on exponentially we have all of these any algorithm can be confirmed observation in any alogorithm into a decision tree and now we have this observation that can be the number of leaves trees in this decision tree have has to bee be very really vbe big so let me talk about leaves in a second first before we get to leaves lets talk about the depth of the this tree so this decions 3 thid decision tree represents all possible executions of algortithm depends on the possible of the algorithm if i look at a particular execution the running time or the number of comparisons made by that execution is just the some root to leave leaf paths that if lenght look a particular excecution the length number of comparisons the path and that executions made by and therefore the worst worse case running time imputs over of all possible inputs of length is going to be length is to be

Chunk size: 60
Heuristic Weight: 2.0
BLEU scores:------------------
BLEU without threshold:0.43202657968407276
BLEU with threshold:0.5719985701525478
BLEU with Graph:0.38917077501728575
BLEU with Muscle:0.18786362160006267

Fmeasure scores:------------------
Fmeasure without threshold:0.5211984320059504
Fmeasure with threshold:0.6558180757000982
Fmeasure with Graph:0.45363468316695255
Fmeasure with Muscle:0.4449385402284535
WER scores:------------------
WER without threshold:0.61082910321489
WER with threshold:0.34856175972927245
WER with Graph:0.505922165820643
WER with Muscle:0.5888324873096447
Estimated Time:8514
